{
  "hash": "905d010057ecd70ac3a8e350dc2dbf26",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'From the archive: 30DayChartChallenge 2022 Pictogram'\ndate: '2024-10-21'\nexecute:\n  freeze: true\n  message: false\n  warning: false\ncode-fold: true\nengine: knitr\ncategories:\n  - Data visualisation\n  - \"30DayChartChallenge 2022\"\n---\n\n\n\n\n<hr/>\n\nThis post has been rescued from a side-project blog that I've disposed of and slowly reposting content from. In this post I created one of my favourite charts:\n\n![](gg_emoji_histogram_fancy.png)\n\n<hr/>\n\nThis chart was built for the \"Pictogram\" prompt in the 2022 #30DayChartChallenge. It's a tired trope to see a normal distribution called something like the \"para-normal distribution\" with a ghost, I then thought about emoji, 5-sigma and then this idea came about.\n\nTo begin I created a dotplot and was lucky enough for my seed to generate a single outlier on the right-side:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndata_hist <- {\n  set.seed(1)\n  tibble(\n    x = rnorm(500,\n              mean = 100,\n              sd = 8)\n  )\n}\n\nsd_of_data <- sd(data_hist$x)\nmean_of_data <- mean(data_hist$x)\n\ngg_hist_dot_plot <- data_hist %>%\n  ggplot(aes(x = x)) +\n  geom_dotplot(binwidth = 1, method = \"dotdensity\", dotsize = 1, position = \"dodge\", binpositions=\"bygroup\")\ngg_hist_dot_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nIn case you've not seen it, you can extract all of the coordinates of geoms from a chart via `ggplot_build()`. Which I'm going to use to add the emoji in place of the dots in the chart:\n\nI then extracted the coordinates of the dots via `ggplot_build()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nbuild_gg <- ggplot_build(gg_hist_dot_plot)\n```\n:::\n\n\nNow I use `{emo}` to create a tibble containing data for my emojis:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(\"emo\")\n\nvec_emojis <- c(\"3+\" = emo::ji(\"scream\"), \"3\" = emo::ji(\"fearful\"), \"2\" = emo::ji(\"confused\"), \"1\" = emo::ji(\"grin\"))\n\ndata_emoji_positions <- build_gg$data %>%\n  as.data.frame() %>%\n  as_tibble() %>%\n  select(x, xmin, xmax, y, stackpos) %>%\n  mutate(sds_from_mean = case_when(\n    x < ( mean_of_data - 3 * sd_of_data ) ~ \"3+\",\n    x <= ( mean_of_data - 2 * sd_of_data ) ~ \"3\",\n    x <= ( mean_of_data - 1 * sd_of_data ) ~ \"2\",\n    x <= ( mean_of_data + 1 * sd_of_data ) ~ \"1\",\n    x <= ( mean_of_data + 2 * sd_of_data ) ~ \"2\",\n    x <= ( mean_of_data + 3 * sd_of_data ) ~ \"3\",\n    x > ( mean_of_data + 3 * sd_of_data )~ \"3+\"\n  )) %>%\n  mutate(emoji_symbol = vec_emojis[sds_from_mean])\n```\n:::\n\n\nTo visualise the standard deviation components of the Normal distribution I created two utility functions:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nhist_function <- function(x){dnorm(x, mean = 100, sd = 8) * 700}\n\ngeom_dnorm_fill <- function(xlim, fill_color, alpha = 1){\n\n  geom_area(stat = \"function\",\n            fun = hist_function,\n            fill = fill_color,\n            alpha = alpha,\n            xlim = xlim)\n\n}\n\ndata_emoji_positions %>%\n  ggplot(aes(x, y = stackpos)) +\n  geom_dnorm_fill(c(mean_of_data - 4 * sd_of_data,\n                    mean_of_data + 4 * sd_of_data),\n                  viridis::viridis(5)[4]) +\n  geom_dnorm_fill(c(mean_of_data - 3 * sd_of_data,\n                    mean_of_data + 3 * sd_of_data),\n                  viridis::viridis(5)[3]) +\n  geom_dnorm_fill(c(mean_of_data - 2 * sd_of_data,\n                    mean_of_data + 2 * sd_of_data),\n                  viridis::viridis(5)[2]) +\n  geom_dnorm_fill(c(mean_of_data - 1 * sd_of_data,\n                    mean_of_data + 1 * sd_of_data),\n                  viridis::viridis(5)[1])\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nI then combined everything together into the original version of the chart in 2022:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(hrbrthemes)\nlibrary(ggtext)\n\ngg_emoji_histogram <- data_emoji_positions %>%\n  ggplot(aes(x, y = stackpos)) +\ngeom_dnorm_fill(c(mean_of_data - 4 * sd_of_data,\n                  mean_of_data + 4 * sd_of_data),\n                viridis::viridis(5)[4]) +\ngeom_dnorm_fill(c(mean_of_data - 3 * sd_of_data,\n                  mean_of_data + 3 * sd_of_data),\n                viridis::viridis(5)[3]) +\ngeom_dnorm_fill(c(mean_of_data - 2 * sd_of_data,\n                  mean_of_data + 2 * sd_of_data),\n                viridis::viridis(5)[2]) +\ngeom_dnorm_fill(c(mean_of_data - 1 * sd_of_data,\n                  mean_of_data + 1 * sd_of_data),\n                viridis::viridis(5)[1]) +\ngeom_richtext(data = tibble(label = str_glue(\"{emo::ji('grin')} represent <span style='color:{viridis::viridis(5)[1]};font-weight:bold'>68% of the data</span>\",\n                                             \"<br>\",\n                                             \"{emo::ji('confused')} represent <span style='color:{viridis::viridis(5)[2]};font-weight:bold'>95% of the data</span>\",\n                                             \"<br>\",\n                                             \"{emo::ji('fearful')} represent <span style='color:{viridis::viridis(5)[3]};font-weight:bold'>99.7% of the data</span>\",\n                                             \"<br>\",\n                                             \"{emo::ji('scream')} represent <span style='color:{viridis::viridis(5)[4]};font-weight:bold'>the rest of the data</span>\")),\n              aes(label = label),\n              family = \"DM Sans\",\n              label.padding = unit(c(0.5, 0.5, 0.5, 0.5), \"lines\"),\n              label.margin = unit(c(0, 0, 0, 0), \"lines\"),\n              size = 7,\n              x = 110,\n              y = 30,\n              hjust=0) +\n  geom_curve(\n    data = tibble(x = 120, y = 15, xend = max(data_emoji_positions$x) - 1, yend = 1),\n    aes(x, y, yend = yend, xend = xend),\n    # x = 120, y = 10, xend = max(data_emoji_positions$x), yend = 1,\n    # data = df,\n    arrow = arrow(length = unit(0.03, \"npc\")),\n    curvature = 0.2,\n    angle = 90\n  ) +\n  # geom_point() +\n  geom_richtext(data = tibble(x = 115,\n                y = 15,\n                label = \"Yup, that's me. You're probably<br>wondering how I ended up in<br> this situation...\"),\n                aes(x, y, label = label),\n                label.colour = \"transparent\",\n                hjust = 0,\n                family = \"Comic Sans MS\",\n                label.padding = unit(c(0, 0.25, 0.25, 0.25), \"lines\"),\n                label.margin = unit(c(0, 0, 0, 0), \"lines\"),\n                size = 6) +\n  geom_richtext(aes(label = emoji_symbol),\n                size = 5,\n                fill = NA,\n                label.color = NA, # remove background and outline\n                label.padding = grid::unit(rep(0, 4), \"pt\")) +\n  scale_y_continuous(expand = expansion(add = c(0, 5))) +\n  NULL +\n  labs(title = \"#30DayChartChallenge 2022-04-02 Pictogram: Emojis and Standard Deviations\",\n       subtitle = \"With apologies to everyone I present the <i>Emoji Standard Deviation Chart</i><br>Author: @charliejhadley\",\n       x = \"\",\n       y = \"\") +\ntheme_ipsum_rc(grid=\"\") +\n  theme(plot.title = element_text(family = \"Arvo\"),\n        plot.subtitle = element_markdown(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank())\n\ngg_emoji_histogram %>%\n  ggsave(quarto_here(\"gg_emoji_histogram.png\"),\n         .,\n         width = 18,\n         height = 10,\n         bg = \"white\")\n```\n:::\n\n\nWhen I recovered this post in 2024 I remembered about `{geomtextpath}` for adding labels to curves and moved the title to bound the distribution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"geomtextpath\")\n\ngg_emoji_histogram_fancy <- data_emoji_positions %>%\n  ggplot(aes(x, y = stackpos)) +\ngeom_dnorm_fill(c(mean_of_data - 4 * sd_of_data,\n                  mean_of_data + 4 * sd_of_data),\n                viridis::viridis(5)[4]) +\ngeom_dnorm_fill(c(mean_of_data - 3 * sd_of_data,\n                  mean_of_data + 3 * sd_of_data),\n                viridis::viridis(5)[3]) +\ngeom_dnorm_fill(c(mean_of_data - 2 * sd_of_data,\n                  mean_of_data + 2 * sd_of_data),\n                viridis::viridis(5)[2]) +\ngeom_dnorm_fill(c(mean_of_data - 1 * sd_of_data,\n                  mean_of_data + 1 * sd_of_data),\n                viridis::viridis(5)[1]) +\n  geom_richtext(data = tibble(label = str_glue(\"{emo::ji('grin')} represent <span style='color:{viridis::viridis(5)[1]};font-weight:bold'>68% of the data</span>\",\n                                             \"<br>\",\n                                             \"{emo::ji('confused')} represent <span style='color:{viridis::viridis(5)[2]};font-weight:bold'>95% of the data</span>\",\n                                             \"<br>\",\n                                             \"{emo::ji('fearful')} represent <span style='color:{viridis::viridis(5)[3]};font-weight:bold'>99.7% of the data</span>\",\n                                             \"<br>\",\n                                             \"{emo::ji('scream')} represent <span style='color:{viridis::viridis(5)[4]};font-weight:bold'>the rest of the data</span>\")),\n              aes(label = label),\n              family = \"DM Sans\",\n              label.padding = unit(c(0.5, 0.5, 0.5, 0.5), \"lines\"),\n              label.margin = unit(c(0, 0, 0, 0), \"lines\"),\n              size = 7,\n              x = 110,\n              y = 30,\n              hjust=0) +\n  geom_curve(\n    data = tibble(x = 120, y = 15, xend = max(data_emoji_positions$x) - 1, yend = 1),\n    aes(x, y, yend = yend, xend = xend),\n    # x = 120, y = 10, xend = max(data_emoji_positions$x), yend = 1,\n    # data = df,\n    arrow = arrow(length = unit(0.03, \"npc\")),\n    curvature = 0.2,\n    angle = 90\n  ) +\n  # geom_point() +\n  geom_richtext(data = tibble(x = 115,\n                y = 15,\n                label = \"Yup, that's me. You're probably<br>wondering how I ended up in<br> this situation...\"),\n                aes(x, y, label = label),\n                label.colour = \"transparent\",\n                hjust = 0,\n                family = \"Comic Sans MS\",\n                label.padding = unit(c(0, 0.25, 0.25, 0.25), \"lines\"),\n                label.margin = unit(c(0, 0, 0, 0), \"lines\"),\n                size = 6) +\n  geom_richtext(aes(label = emoji_symbol),\n                data = data_emoji_positions,\n                size = 5,\n                fill = NA,\n                label.color = NA, # remove background and outline\n                label.padding = grid::unit(rep(0, 4), \"pt\")) +\n  geom_textpath(\n    # data = filter(data_emoji_positions, x <= 100),\n    stat = \"function\", \n    vjust = -0.5,\n    linewidth = 0,\n    fun = function(x){ifelse(between(x, 86, 100), dnorm(x, mean = 100, sd = 8) * 700, NA)},\n    label = \"#30DayChartChallenge 2022\",\n    # family = \"Comic Sans MS\",\n    rich = TRUE,\n    size = 8\n  ) +\n  geom_textpath(\n    # data = filter(data_emoji_positions, x <= 100),\n    stat = \"function\", \n    vjust = -0.2,\n    linewidth = 0,\n    fun = function(x){ifelse(between(x, 100, 117), dnorm(x, mean = 100, sd = 8) * 700, NA)},\n    label = \"Pictogram: Emojis and Standard Deviations\",\n    family = \"Comic Sans MS\",\n    rich = TRUE,\n    size = 8\n  ) +\n  scale_y_continuous(expand = expansion(add = c(0, 5))) +\n  labs(x = \"\",\n       y = \"\",\n       caption = \"Author: @charliejhadley\") +\ntheme_ipsum_rc(grid=\"\") +\n  theme(plot.title = element_text(family = \"Arvo\"),\n        plot.subtitle = element_markdown(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        plot.caption.position = \"plot\")\n\ngg_emoji_histogram_fancy %>% \n  ggsave(quarto_here(\"gg_emoji_histogram_fancy.png\"),\n         .,\n         width = 18,\n         height = 10,\n         bg = \"white\")\n```\n:::\n\n\n![](gg_emoji_histogram_fancy.png)",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}