{
  "hash": "dec740b522ac9b47bba907f578b7aca6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Curves and stones\"\ndate: '2024-11-08'\nexecute:\n  freeze: true\n  message: false\n  warning: false\n  echo: true\ncode-fold: true\nengine: knitr\nfilters:\n  - line-highlight\n---\n\n\n\n\n\n:::{layout-ncol=2}\n\n:::{.left}\n\nI've got a project I'm working on where I've been inspired by the [elemental stones in the Fifth Element movie](https://fifth-element.fandom.com/wiki/Elemental_Stones) you can see to the right.\n\nIn this post I'll produce this chart:\n\n<img src='ggptch_all_directions.png' width='200px'/>\n\n\n:::\n\n:::{.right}\n\n\n![](The_Four_Stones.webp)\n\n:::\n\n:::\n\nHave you ever seen [Megan Harris' incredible generative art built with R](https://thetidytrekker.com/rtistry)? If not - please take a look! While I was researching ways to make wavy lines with `{ggplot2}` I came across [Megan's blogpost where she makes this beautiful chart](https://thetidytrekker.com/post/making-waves/making-waves.html).\n\n<img src='tidytrekker-chart.png' width='200px'/>\n\nBorrowing pretty much directly from Megan's code, here's a nice sine curve that looks a little like the lines on the stones:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"tidyverse\")\n\ntheta <- seq(from = 0,\n             to = 2*pi, \n             length.out = 100)\n\nsine <- tibble(x = theta,\n               y = sin(theta),\n               label = 1:length(theta))\n\nwave_theta <- seq(from = 0,\n                  to = 2 * pi, \n                  by = .1) \n\ncurve_top <- tibble(x = wave_theta,\n                    y = sin(x)) %>%\n  arrange(x)\n\ncurve_top %>%\n  ggplot(aes(x=x, y=y))+\n  geom_path(arrow = arrow(type=\"closed\"), linewidth = 3) +\n  coord_fixed(xlim = c(0, 2 * pi),\n              ratio = 1 / 2) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\nNice! Okay. So let's stack 6 of these on top of one another:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwave_theta <- seq(from = 0,\n                  to = 2 * pi, \n                  by = .1) \n\ntibble(x = rep(seq(from = 0,\n                  to = 2 * pi, \n                  by = .1) , 6),\n       line = rep(1:6, each = length(wave_theta))) %>% \n  mutate(y = line + sin(x),\n         line = as.character(line)) %>% \n  ggplot(aes(x=x, y=y, group = line))+\n  geom_path(arrow = arrow(type=\"closed\"), linewidth = 5, show.legend = FALSE) +\n  scale_x_continuous(expand = expansion(mult = 0, add = c(-0.1, 0.1))) +\n  coord_fixed(ratio = 1 / 2) +\n  theme_void() +\n  theme(panel.background = element_rect(fill = \"#9A7D66\", colour = \"transparent\"),\n        panel.border = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\nI then played around with reflecting these and also making vertical lines... it didn't quite look right:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"patchwork\")\n\ngg_L2R_sin_arrowed <- tibble(x = rep(seq(from = 0,\n                  to = 2 * pi, \n                  by = .1) , 6),\n       line = rep(1:6, each = length(wave_theta))) %>% \n  mutate(y = line + sin(x),\n         line = as.character(line)) %>% \n  ggplot(aes(x=x, y=y, group = line))+\n  geom_path(arrow = arrow(type=\"closed\", ends = \"last\"), linewidth = 5, show.legend = FALSE) +\n  scale_x_continuous(expand = expansion(mult = 0, add = c(-0.1, 0.1))) +\n  scale_y_continuous(expand = expansion(0, c(0.3, 0.3))) +\n  coord_fixed(ratio = 1 / 2,\n              ylim = c(0, 7)) +\n  theme_void() +\n  theme(panel.background = element_rect(fill = \"#9A7D66\", colour = \"transparent\"),\n        panel.border = element_blank()) \n\ngg_R2L_cos_arrowed <- tibble(x = rep(seq(from = 0,\n                  to = 2 * pi, \n                  by = .1) , 6),\n       line = rep(-1:4, each = length(wave_theta))) %>% \n  mutate(y = line + cos(x),\n         line = as.character(line)) %>% \n  ggplot(aes(x=x, y=y, group = line))+\n  geom_path(arrow = arrow(type=\"closed\", ends = \"first\"), linewidth = 5, show.legend = FALSE) +\n  scale_x_continuous(expand = expansion(mult = 0, add = c(0.1, -0.1))) +\n  scale_y_continuous(expand = expansion(0, c(0.3, 0.3))) +\n  coord_fixed(ratio = 1 / 2,\n              ylim = c(-2, 5.2)) +\n  theme_void() +\n  theme(panel.background = element_rect(fill = \"#9A7D66\", colour = \"transparent\"),\n        panel.border = element_blank())\n\nggptch_both_horiz <- gg_L2R_sin_arrowed + theme(plot.margin = margin(r = 10)) | gg_R2L_cos_arrowed\n\nggptch_both_horiz %>% \n  ggsave(quarto_here(\"ggptch_both_horiz.png\"),\n         .,\n         width = 5.22 * 2,\n         height = 4 )\n```\n:::\n\n\n\n![](ggptch_both_horiz.png)\n\n## Arrows in the middle?\n\nWith the arrows at the end of the lines it means that the images need to be padded asymmetrically - or at least it's not a simple swap between the charts. Let's see move the arrows to the middle of the lines and swap to using sin for both left and right\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq_x <- seq(from = 0,\n                  to = 2 * pi, \n                  by = pi / 100)\nn_lines <- 11\n\ndata_left_and_right <- tibble(x = rep(seq_x, 9),\n       line = rep(seq(-1, 7), each = length(seq_x))) %>% \n  mutate(y = line + sin(x)) \n\ndata_arrows_left_and_right <- data_left_and_right %>% \n  filter(x %in% c(seq_x[c(100, 102)]),\n         between(line, 1, 6)) %>% \n  group_by(line) %>%\n  summarise(xmin = min(x),\n        xmax = max(x),\n        ymax = max(y),\n        ymin = min(y))\n\ngg_left_to_right <- data_left_and_right %>%\n  ggplot(aes(x = x, y = y, group = line)) +\n    geom_segment(data = data_arrows_left_and_right,\n               aes(x = xmin, y = ymax, xend = xmax, yend = ymin, group = line),\n               arrow = arrow(type=\"closed\", ends = \"last\"), linewidth = 5, show.legend = FALSE) + \n  geom_path(linewidth = 5,\n            show.legend = FALSE,\n            aes(colour = ifelse(between(line, 1, 6), \"main\", \"background\"))) +\n  scale_x_continuous(expand = expansion(0, -0.1)) +\n  scale_y_continuous(expand = expansion(0, 0)) +\n  scale_colour_manual(values = c(\"main\" = \"black\",\n                                 \"background\" = \"grey80\")) +\n  coord_fixed(ratio = 1 / 2, ylim = c(0, 7), xlim = c(0, 2*pi)) +\n  theme_void() +\n  theme(\n    panel.background = element_rect(fill = \"#9A7D66\", colour = \"transparent\"),\n    panel.border = element_blank()\n  ) \n\ngg_right_to_left <- data_left_and_right %>%\n  ggplot(aes(x = x, y = y, group = line)) +\n    geom_segment(data = data_arrows_left_and_right,\n               aes(x = xmin, y = ymax, xend = xmax, yend = ymin, group = line),\n               arrow = arrow(type=\"closed\", ends = \"first\"), linewidth = 5, show.legend = FALSE) + \n  geom_path(linewidth = 5,\n            show.legend = FALSE,\n            aes(colour = ifelse(between(line, 1, 6), \"main\", \"background\"))) +\n  scale_x_continuous(expand = expansion(0, -0.1)) +\n  scale_y_continuous(expand = expansion(0, 0)) +\n  scale_colour_manual(values = c(\"main\" = \"black\",\n                                 \"background\" = \"grey80\")) +\n  coord_fixed(ratio = 1 / 2, ylim = c(0, 7), xlim = c(0, 2*pi)) +\n  theme_void() +\n  theme(\n    panel.background = element_rect(fill = \"#9A7D66\", colour = \"transparent\"),\n    panel.border = element_blank()\n  ) \n\nggptch_left_and_right <- gg_left_to_right + theme(plot.margin = margin(r = 20)) | gg_right_to_left\n\nggptch_left_and_right %>% \n  ggsave(quarto_here(\"ggptch_left_and_right.png\"),\n         .,\n         width = 5 * 2 + 0.5,\n         height = 2.5 * 2 + 1.5)\n```\n:::\n\n\n\n![](ggptch_left_and_right.png)\n\nCool! I like those. Now let's make the vertical versions by swapping the x and y coordinates and combine them altogether with `{patchwork}`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq_x_tb <- seq(from = -0.5,\n                  to = 2.5 * pi, \n                  by = pi / 100)\nn_lines <- 11\n\ndata_top_and_bottom <- tibble(x = rep(seq_x_tb, 9),\n       line = rep(seq(-1, 7), each = length(seq_x_tb))) %>% \n  mutate(y = line + sin(x)) \n\ndata_arrows_bottom_and_top <- data_top_and_bottom %>% \n  filter(x %in% c(seq_x_tb[c(length(seq_x_tb) / 2 -1 , length(seq_x_tb) / 2 + 1)]),\n         between(line, 1, 6)) %>% \n  group_by(line) %>%\n  summarise(xmin = min(x),\n        xmax = max(x),\n        ymax = max(y),\n        ymin = min(y))\n\ngg_top_to_bottom <- data_top_and_bottom %>%\n  ggplot(aes(y = x, x = y, group = line)) +\n    geom_segment(data = data_arrows_bottom_and_top,\n               aes(y = xmin, x = ymax, yend = xmax, xend = ymin, group = line),\n               arrow = arrow(type=\"closed\", ends = \"first\"), linewidth = 5, show.legend = FALSE) +\n  geom_path(linewidth = 5,\n            show.legend = FALSE,\n            aes(colour = ifelse(between(line, 1, 6), \"main\", \"background\"))) +\n  scale_x_continuous(expand = expansion(0, -0.1)) +\n  scale_y_continuous(expand = expansion(0, 0)) +\n  scale_colour_manual(values = c(\"main\" = \"black\",\n                                 \"background\" = \"grey80\")) +\n  coord_fixed(ratio = 1 / 2, ylim = c(0, 7), xlim = c(0, 2 * pi)) +\n  theme_void() +\n  theme(\n    panel.background = element_rect(fill = \"#9A7D66\", colour = \"transparent\"),\n    panel.border = element_blank()\n  ) \n\ngg_bottom_to_top <- data_top_and_bottom %>%\n  ggplot(aes(y = x, x = y, group = line)) +\n    geom_segment(data = data_arrows_bottom_and_top,\n               aes(y = xmin, x = ymax, yend = xmax, xend = ymin, group = line),\n               arrow = arrow(type=\"closed\", ends = \"last\"), linewidth = 5, show.legend = FALSE) +\n  geom_path(linewidth = 5,\n            show.legend = FALSE,\n            aes(colour = ifelse(between(line, 1, 6), \"main\", \"background\"))) +\n  scale_x_continuous(expand = expansion(0, -0.1)) +\n  scale_y_continuous(expand = expansion(0, 0)) +\n  scale_colour_manual(values = c(\"main\" = \"black\",\n                                 \"background\" = \"grey80\")) +\n  coord_fixed(ratio = 1 / 2, ylim = c(0, 7), xlim = c(0, 2 * pi)) +\n  theme_void() +\n  theme(\n    panel.background = element_rect(fill = \"#9A7D66\", colour = \"transparent\"),\n    panel.border = element_blank()\n  ) \n\n\n(gg_top_to_bottom + theme(plot.margin = margin(r = 20)) | gg_bottom_to_top)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggptch_all_directions <- (gg_left_to_right + theme(plot.margin = margin(r = 20)) | gg_right_to_left) / \n(gg_top_to_bottom + theme(plot.margin = margin(r = 20)) | gg_bottom_to_top)\n\nggptch_all_directions %>% \n  ggsave(quarto_here(\"ggptch_all_directions.png\"),\n         .,\n         width = 5 * 2 + 0.5,\n         height = 2.5 * 2 + 1.5)\n```\n:::\n\n\n\n![](ggptch_all_directions.png)\nIn an ideal world I'd play around with the vertical images to make them align better, but I can't quite figure out how to do that today. Hopefully you'll be seeing these charts again in a project soon. But even if not, I'm quite happy with how they look 😀",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}