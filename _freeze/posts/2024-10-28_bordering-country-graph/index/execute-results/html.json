{
  "hash": "f4593fbdb18ee638d591821405dc87ef",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bordering countries graph\"\ndate: '2024-11-04'\nexecute:\n  freeze: true\n  message: false\n  warning: false\ncode-fold: false\nengine: knitr\nfilters:\n  - line-highlight\n---\n\n\n\n\n\n\n:::{layout-ncol=2}\n\n:::{.left}\n\nIn this post we're going to build up this **graph** which shows all countries with at least one border and the connections that remain after removing countries with only a single border. \n\nTo solve this smoothly I was very pleased to discover the [newly [December 2023] added `guide_custom()` functionality]([`geom_custom()` was added in late 2023](https://github.com/tidyverse/ggplot2/pull/5496)) of `{ggplot2}`. Of course, this just works effortlessly with the `{ggraph}` extension for graph visualisation. \n\n:::\n\n:::{.right}\n\n![](gg_graph_countries.png)\n\n:::\n\n:::\n\n## Connected Countries with tidygraph and ggraph\n\nI've been thinking about TidyTuesday datasets with country data and how it could be interesting to use country borders as a component of the chart making process. And what's better than working on an actual TidyTuesday visualisation than getting distracted with something tangential to it?\n\nIn [my utility package {cjhRutils}](https://github.com/charliejhadley/cjhRutils) I have a `tidygraph` object containing the nodes and edges of the connected countries, the code can be found in [this script](https://github.com/charliejhadley/cjhRutils/blob/master/data-raw/graph_connected_countries.R). After loading the package (alongside `{tidygrapph}`) we can see our dataset:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"tidyverse\")\nlibrary(\"tidygraph\")\nlibrary(\"cjhRutils\")\nlibrary(\"ggtext\")\n\nggraph_bordering_countries\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tbl_graph: 173 nodes and 608 edges\n#\n# A directed simple graph with 26 components\n#\n# A tibble: 173 × 8\n     id iso_a2 iso_a3 name                 name_long name_en region_wb continent\n  <int> <chr>  <chr>  <chr>                <chr>     <chr>   <chr>     <chr>    \n1     1 AE     ARE    United Arab Emirates United A… United… Middle E… Asia     \n2     2 AF     AFG    Afghanistan          Afghanis… Afghan… South As… Asia     \n3     3 AL     ALB    Albania              Albania   Albania Europe &… Europe   \n4     4 AM     ARM    Armenia              Armenia   Armenia Europe &… Asia     \n5     5 AO     AGO    Angola               Angola    Angola  Sub-Saha… Africa   \n6     6 AQ     ATA    Antarctica           Antarcti… Antarc… Antarcti… Antarcti…\n# ℹ 167 more rows\n#\n# A tibble: 608 × 3\n   from    to border_region             \n  <int> <int> <chr>                     \n1     1   120 Middle East & North Africa\n2     1   136 Middle East & North Africa\n3     2    34 Cross Region              \n# ℹ 605 more rows\n```\n\n\n:::\n:::\n\n\n\nThe graph contains all countries with at least one connection, let's filter the graph to only include countries with two border or more... and visualise that naively with `{ggraph}`\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(\"ggraph\")\n\nset.seed(1)\nggraph_bordering_countries %>%\n  activate(nodes) %>%\n  mutate(node_degree = tidygraph::centrality_degree()) %>%\n  filter(node_degree > 1) %>%\n  ggraph(layout = 'nicely') +\n  geom_node_point(aes(colour = region_wb)) +\n  geom_edge_link(aes(colour = border_region))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n## Custom ggplot2 legends with guide_custom()\n\nThe guide/legend for that chart is a little bit complicated. Let's look at why:\n\n1. Nodes are coloured by the continent the node belongs to.\n\n1. Edges are coloured by if the two nodes belong to the same continent.\n\n1. There is a single node from \"North America\" but no edges with the `border_region` of \"North America\"\n\n1. There are edges that need to be coloured \"Cross Region\" but no nodes with that colour.\n\nTo solve this I thought of using my old trick of hijacking an unused aesthetic and manipulating its guide. However! That's not really possible in this case, so I googled for alternatives and was extremeley [`geom_custom()` was added in late 2023](https://github.com/tidyverse/ggplot2/pull/5496). In the chart below I've used `guide_custom()` to add a red line that I can use to label cross regional borders.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\ngg_graph_for_coords <- ggraph_bordering_countries %>%\n  activate(nodes) %>%\n  mutate(node_degree = tidygraph::centrality_degree()) %>%\n  filter(node_degree > 1) %>%\n  ggraph(layout = 'nicely') +\n  geom_node_point(aes(colour = region_wb)) +\n  geom_node_label(aes(label = iso_a2), size = 0) +\n  geom_edge_link() +\n  guides(custom = guide_custom(\n    title = \"Cross regional borders\",\n    grob = grid::linesGrob(\n      x = unit(c(0, 5.4), \"cm\"),\n      y = unit(c(0, 0), \"cm\"),\n      gp = grid::gpar(col = '#F44336', lwd = 3)\n    )\n  ))\n\ngg_graph_for_coords\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=95%}\n:::\n:::\n\n\n\nIn the final chart I'd like to add a label to the US to explain why it's included but Canada isn't. So let's grab the coordinates of the node so I can use them to help figure out where to place the label\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot_build(gg_graph_for_coords)$data[[3]] %>%\n  filter(label == \"US\") %>%\n  select(x, y) %>%\n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 2\n# ℹ 2 variables: x <dbl>, y <dbl>\n```\n\n\n:::\n:::\n\n\n\nNice. Now we can think about beautification. I've chosen to use colours from the <coolors.co> service and have found a subjective balance of colours that I think looks good based on how many nodes are in each group. To ensure a little bit of sense to the colours, I'll order them as a factor so that the group with the most nodes appears at the top of the legend.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# https://coolors.co/448aff-1565c0-009688-8bc34a-ffc107-ff9800-f44336-ad1457\nvec_colours <- c(\n  \"Cross Region\" = \"#F44336\",\n  \"East Asia & Pacific\" = \"#1565C0\",\n  \"Europe & Central Asia\" = \"#009688\",\n  \"Latin America & Caribbean\" = \"#8BC34A\",\n  \"Middle East & North Africa\" = \"#FFC107\",\n  \"North America\" = \"#FF9800\",\n  \"South Asia\" = \"#448AFF\",\n  \"Sub-Saharan Africa\" = \"#AD1457\"\n)\n\nvec_order_borders <- ggraph_bordering_countries %>%\n  activate(edges) %>%\n  as_tibble() %>%\n  count(border_region, sort = TRUE) %>%\n  pull(border_region)\n\nvec_colours <- vec_colours[vec_order_borders]\n\nggraph_one_edge_plus <- ggraph_bordering_countries %>%\n  activate(nodes) %>%\n  mutate(node_degree = tidygraph::centrality_degree()) %>%\n  filter(node_degree > 1)  %>%\n  mutate(region_wb = fct_relevel(region_wb, vec_order_borders)) %>%\n  activate(edges) %>%\n  mutate(\n    border_region = fct_expand(border_region, \"North America\"),\n    border_region = fct_relevel(border_region)\n  )\n\nset.seed(1)\ngg_graph_before_label <- ggraph_one_edge_plus %>%\n  ggraph(layout = 'nicely') +\n  aes(colour = region_wb) +\n  geom_edge_link(aes(colour = border_region),\n                 show.legend = FALSE,\n                 edge_width = 0.5) +\n  geom_node_point(\n    aes(fill = region_wb),\n    # show.legend = TRUE,\n    colour = \"black\",\n    size = 5,\n    pch = 21\n  ) +\n  geom_node_text(\n    aes(\n      label = iso_a2,\n      colour = ifelse(\n        region_wb %in% c(\"Middle East & North Africa\", \"North America\"),\n        \"black\",\n        \"white\"\n      )\n    ),\n    size = 2.3,\n    family = \"Source Code Pro\",\n    fontface = \"bold\"\n  )  +\n  scale_colour_identity() +\n  scale_edge_colour_manual(values = vec_colours, drop = FALSE) +\n  scale_fill_manual(values = vec_colours, drop = FALSE) +\n  guides(\n    custom = guide_custom(\n      title = \"Cross regional borders\",\n      grob = grid::linesGrob(\n        x = unit(c(0, 6.9), \"cm\"),\n        y = unit(c(0, 0), \"cm\"),\n        gp = grid::gpar(col = '#F44336', lwd = 3.5)\n      )\n    ),\n    fill = guide_legend(title = \"\")\n  ) +\n  labs(\n    title = \"Who's connected to who?\",\n    subtitle = \"Countries with at least one land border\",\n    x = \"\",\n    y = \"\",\n    caption = \"@charliejhadley | Source: geodatasource.com/addon/country-borders\"\n  ) +\n  theme_minimal(base_size = 12, base_family = \"Roboto\") +\n  theme(\n    legend.title = element_text(size = 12 * 1.618),\n    panel.grid = element_blank(),\n    plot.caption = element_text(\n      size = 12,\n      family = \"Roboto\",\n      lineheight = 0.5,\n      margin = margin(t = -5)\n    ),\n    plot.title = element_text(\n      family = \"Roboto\",\n      size = 12 * 1.618 ^ 3,\n      margin = margin(t = 20)\n    ),\n    plot.subtitle = element_text(size = 12 * 1.618 ^ 2, margin = margin(b = -10)),\n    panel.grid.major.y = element_blank(),\n    axis.line = element_blank(),\n    axis.ticks = element_blank(),\n    axis.text = element_blank(),\n    legend.text = element_text(size = 12 * 1.618),\n    # legend.spacing.y = unit(2.0, \"cm\"),\n    legend.key.size = unit(1, \"cm\"),\n    legend.key = element_rect(color = NA, fill = NA),\n    plot.caption.position = \"plot\"\n  )\n\ngg_graph_before_label\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n![](gg_graph_before_label.png)\n\nLet's add in my labels, which are manually placed but use the node position extracted earlier to help place them.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_graph_countries <- gg_graph_before_label +\n  geom_curve(\n    data = tibble(\n      x = 5.08 - 8.5,\n      y = -4.96 ,\n      xend = 5.08 - 1.3,\n      yend = -4.96 - 0.2\n    ),\n    aes(x, y, yend = yend, xend = xend),\n    \n    inherit.aes = FALSE,\n    arrow = arrow(length = unit(0.01, \"npc\")),\n    curvature = 0.2,\n    angle = 90\n  ) +\n  geom_label(\n    data = tibble(\n      x = 5.08 - 8.5,\n      y = -4.96 - 0.5,\n      label = str_wrap(\n        \"Canada isn't here. It only has a single land border with the US - which is included as it has two borders\",\n        30\n      )\n    ),\n    aes(x, y, label = label),\n    fill = colorspace::darken(\"#D8E4EA\"),\n    label.padding = unit(0.4, \"lines\"),\n    hjust = 0,\n    colour = \"black\",\n    inherit.aes = FALSE,\n    size = 4\n  )\n\ngg_graph_countries %>%\n  ggsave(\n    quarto_here(\"gg_graph_countries.png\"),\n    .,\n    width = 4.25 * 3,\n    height = 3.4 * 3,\n    bg = \"#D8E4EA\"\n  )\n```\n:::\n\n\n\n![](gg_graph_countries.png)",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}