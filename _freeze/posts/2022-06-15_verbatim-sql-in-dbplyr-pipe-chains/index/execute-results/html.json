{
  "hash": "dc4c6973b2123ab65baf76541c0b6624",
  "result": {
    "markdown": "---\ntitle: 'Writing verbatim SQL in pipe chains using {dbplyr}'\ndate: '2022-06-15'\ncode-fold: false\n---\n\nI've been trying to use the [`{dbplyr}`](https://dbplyr.tidyverse.org/) package when working with SQL and R. It provides a really nice interface for writing tidyverse code against a database connection. I feel that `{dbplyr}` gives a generally nice interface than using `{DBI}` which is the approach used in [db.rstudio.com](https://db.rstudio.com), but it's under documented.\n\nHere's a comparison of code using `{DBI}` and `{dbplyr}`\n\n- Using `{dbplyr}`\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(fivethirtyeight)\nlibrary(dbplyr)\n\nbechdel_tbl <- memdb_frame(bechdel, .name = \"bechdel\")\n\nbechdel_tbl %>% \n  filter(year < 2000) %>% \n  group_by(clean_test) %>% \n  summarise(mean_budget_2013 = mean(budget_2013))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [5 x 2]\n# Database: sqlite 3.38.5 [:memory:]\n  clean_test mean_budget_2013\n  <chr>                 <dbl>\n1 dubious           59202525.\n2 men               45896513.\n3 notalk            57963237.\n4 nowomen           51891839.\n5 ok                44990138.\n```\n:::\n:::\n\n- Using `{DBI}`\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(fivethirtyeight)\nlibrary(DBI)\n\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\ncopy_to(con, bechdel, \"bechdel\")\n\ntbl(con, \"bechdel\") %>% \n  filter(year < 2000) %>% \n  group_by(clean_test) %>% \n  summarise(mean_budget_2013 = mean(budget_2013))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [5 x 2]\n# Database: sqlite 3.38.5 [:memory:]\n  clean_test mean_budget_2013\n  <chr>                 <dbl>\n1 dubious           59202525.\n2 men               45896513.\n3 notalk            57963237.\n4 nowomen           51891839.\n5 ok                44990138.\n```\n:::\n:::\n\nNow, that's great for when we want to write new queries. But I wanted to go in the other direction. There's lots of existing SQL code that I don't want to re-write into R code, so it would be nice to write verbatim SQL within the pipe syntax. I couldn't figure it out from the documentation so asked the question on Twitter, and as is often the case [Garrick Aden-Buie](https://twitter.com/grrrck) gave me the solution.\n\n::: {.cell}\n\n```{.r .cell-code}\ntweetrmd::tweet_embed(\"https://twitter.com/grrrck/status/1537082896124616705\")\n```\n\n::: {.cell-output-display}\n```{=html}\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-lang=\"en\" data-dnt=\"true\" data-theme=\"light\"><p lang=\"en\" dir=\"ltr\">if `bechdel_con` is a connection object then you can<br><br>library(dbplyr)<br>bechdel_con %&gt;% tbl(sql(&quot;SELECT title FROM bechdel&quot;))<br><br>if `bechdel_tbl` is a remote tibble then you can<br>bechdel_tbl %&gt;%<br>  remote_con() %&gt;%<br>  tbl(&quot;SELECT title FROM bechdel&quot;)</p>&mdash; Garrick Aden-Buie (@grrrck) <a href=\"https://twitter.com/grrrck/status/1537082896124616705?ref_src=twsrc%5Etfw\">June 15, 2022</a></blockquote>\n\n```\n:::\n:::\n\nLet's write that into a code chunk:\n\n::: {.cell}\n\n```{.r .cell-code}\nbechdel_tbl %>% \n  remote_con() %>% \n  tbl(sql(\"SELECT `clean_test`, AVG(`budget_2013`) AS `mean_budget_2013`\nFROM `bechdel`\nWHERE (`year` < 2000.0)\nGROUP BY `clean_test`\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   SQL [5 x 2]\n# Database: sqlite 3.38.5 [:memory:]\n  clean_test mean_budget_2013\n  <chr>                 <dbl>\n1 dubious           59202525.\n2 men               45896513.\n3 notalk            57963237.\n4 nowomen           51891839.\n5 ok                44990138.\n```\n:::\n:::\n\nNote that we're still connected to the database here. If we want to return a local tibble we need to use `collect()` which means our entire workflow is as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\nbechdel_tbl <- memdb_frame(bechdel, .name = \"bechdel\")\n\nbechdel_tbl %>% \n  remote_con() %>% \n  tbl(sql(\"SELECT `clean_test`, AVG(`budget_2013`) AS `mean_budget_2013`\nFROM `bechdel`\nWHERE (`year` < 2000.0)\nGROUP BY `clean_test`\")) %>% \n  collect()\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 Ã— 2\n  clean_test mean_budget_2013\n  <chr>                 <dbl>\n1 dubious           59202525.\n2 men               45896513.\n3 notalk            57963237.\n4 nowomen           51891839.\n5 ok                44990138.\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/twitter-widget-0.0.1/widgets.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}