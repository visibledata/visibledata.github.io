{
  "hash": "0d3003d723aea58f8600a08f95734629",
  "result": {
    "markdown": "---\ntitle: '2022-09-01_ggplot2-breaks-geom-sf-calls-in-3-3-6'\ndate: '2022-09-01'\ncode-fold: false\nengine: knitr\ndraft: true\n---\n\n\nThis is a draft blogpost. \n\nAs detailed here https://github.com/tidyverse/ggplot2/issues/4883 the 3.3.6 version of {ggplot2} introduces a new linewidth aesthetic. For ALL geoms except for geom_sf() and geom_pointrange() this causes no issues.\n\nBut in choropleth built with {ggplot2} where size = n was used to decrease the weight of polygon lines will no longer be effective. I tweeted about it here: https://twitter.com/charliejhadley/status/1562800738816106496?s=20&t=ixvEsEfT7lAgFfmJb3yTQg\n\nI think that some static code analysis could help with this!\n\n- Identify the line numbers of all geom_sf() calls with size as a direct argument [ie not inside aes]\n\n- Optionally allow users to specify a range for the size value, predicting that the size being smaller than 1 is a useful hueretistic for identifying problematic code.\n\nI started doing a bit of research:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(rnaturalearthdata)\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n```\n:::\n\n```{.r .cell-code}\nworld_sf <- countries110 %>% \n  st_as_sf()\n\nggplot() +\n  geom_sf(data = world_sf,\n          size = 0.1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/code-to-analyse-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = world_sf,\n          fill = \"green\",\n          size = 0.4)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/code-to-analyse-2.png){width=672}\n:::\n:::\n\n\nThis parses out an expression - but doesn't give me line numbers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparse(here::here(\"posts\", \"2022-09-01_ggplot2-breaks-geom-sf-calls-in-3-3-6\", \"code-to-analyse.R\")) %>% \n  keep(is.language)  %>% \n  keep(~grepl(\", geom_sf\", toString(.x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nexpression(ggplot() + geom_sf(data = world_sf, size = 0.1), ggplot() + \n    geom_sf(data = world_sf, fill = \"green\", size = 0.4))\n```\n:::\n:::\n\n\ngetParseData() is a really useful function that gives LOTS of data. But I'm not sure how to partse it yey\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparse_data <- parse(here::here(\"posts\", \"2022-09-01_ggplot2-breaks-geom-sf-calls-in-3-3-6\", \"code-to-analyse.R\")) %>% \n  getParseData() %>% \n  rownames_to_column() %>% \n  rename(parent_id = rowname) %>% \n  mutate(parent_id = as.integer(parent_id)) %>% \n  as_tibble()\n\n\nparse_data %>% \n  relocate(parent_id, parent, token, text) %>% \n  filter(text == \"geom_sf\")\n```\n:::\n\n\nThis is probably quite close to what I need https://stackoverflow.com/a/47189529\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(rnaturalearthdata)\nlibrary(sf)\nlibrary(rlang)\nworld_sf <- countries110 %>% \n  st_as_sf()\n\n\nfenv <- new.env()\n\nevaluated_geom_sf <- parse(here::here(\"posts\", \"2022-09-01_ggplot2-breaks-geom-sf-calls-in-3-3-6\", \"code-to-analyse.R\")) %>% \n  keep(is.language)  %>% \n  keep(~grepl(\", geom_sf\", toString(.x))) %>% \n  map(expression, envir=fenv) \n\nparse(here::here(\"posts\", \"2022-09-01_ggplot2-breaks-geom-sf-calls-in-3-3-6\", \"code-to-analyse.R\")) %>% \n  keep(is.language)  %>% \n  keep(~grepl(\", geom_sf\", toString(.x))) %>% \n  map(expr_interp) %>% \n  map(call_args)\n\nevaluated_geom_sf %>% \n  map(quote)\n\nrlang::call_name(evaluated_geom_sf[1])\n\n  map_df(~{\n    params <- list(names(formals(.x)))\n    bdy <- deparse(body(.x))\n    bdy <- bdy[length(bdy)-1]\n    data_frame(target = trimws(bdy), params = params)\n  }) %>% \n  mutate(fname = ls(fenv))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfenv <- new.env()\n\nevaluated_fns <- parse(here::here(\"posts\", \"2022-09-01_ggplot2-breaks-geom-sf-calls-in-3-3-6\", \"function-code.R\")) %>% \n  keep(is.language)  %>% \n  keep(~grepl(\", function\", toString(.x))) %>% \n  map(eval, envir=fenv) %>% \n  map_df(~{\n    params <- list(names(formals(.x)))\n    bdy <- deparse(body(.x))\n    bdy <- bdy[length(bdy)-1]\n    data_frame(target = trimws(bdy), params = params)\n  }) %>% \n  mutate(fname = ls(fenv))\n\nevaluated_fns %>% \n  unnest(params)\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}