<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Visible Data</title>
<link>https://visibledata.co.uk/blog.html</link>
<atom:link href="https://visibledata.co.uk/blog.xml" rel="self" type="application/rss+xml"/>
<description>Data Science Consultancy & Training</description>
<generator>quarto-0.9.288</generator>
<lastBuildDate>Mon, 08 Jul 2019 23:00:00 GMT</lastBuildDate>
<item>
  <title>Shiny modules to reduce duplication in apps</title>
  <link>https://visibledata.co.uk/posts/2019-07-09-shiny-modules-to-reduce-duplication-in-apps/index.html</link>
  <description><![CDATA[ 




<p>Shiny apps are awesome, with a bit of training you can build fairly impressive interactive web apps. But at some point, the subject of “shiny modules” will rear its head.</p>
<p>When I started learning modules, I found most of the existing <a href="http://shiny.rstudio.com/articles/modules.html">articles</a> focus on the technical-side of things and don’t focus on the <strong>benefits of using modules</strong> - they can significantly simplify and improve your apps.</p>
<p>I’m going to put together a few different tutorials on real-world Shiny apps and how modules can be used to improve them. As these tutorials develop I’ll link to them below.</p>
<p>But for now, we’re going to build this Shiny app:</p>
<div class="row">
<div class="col-sm-5">
<center>
<img src="https://visibledata.co.uk/posts/2019-07-09-shiny-modules-to-reduce-duplication-in-apps/shiny-app-wireframe.png" alt="Wireframe for shiny app" width="300px">
</center>
</div>
<div class="col-sm-7">
<ul>
<li><p>The shiny app displays data from the <code>WDI</code> package</p></li>
<li><p>Each “page” of the Shiny app details a different “development indicator” from the <code>WDI</code> package</p></li>
<li><p>Users select a country of interest from a pull-down menu</p></li>
<li><p>The chart, text and table underneath the pull-down menu all update when a country is selected</p></li>
<li><p>The charts, text and tables are <strong>the same on each page</strong> except for two variables; the selected country and the indicator detailed on that page.</p></li>
</ul>
</div>
</div>
<section id="how-to-use-this-tutorial" class="level3">
<h3 class="anchored" data-anchor-id="how-to-use-this-tutorial">How to use this tutorial</h3>
<p>It’s often useful to skim read through a tutorial before attempting to run the code on your own machine. If you do want to follow along with the code, you will need to install the <code>{usethis}</code> package before starting.</p>
<p>This tutorial is split into</p>
<ul>
<li><p>Shiny app without modules</p></li>
<li><p>Shiny app</p></li>
</ul>
</section>
<section id="shiny-app-without-modules" class="level3">
<h3 class="anchored" data-anchor-id="shiny-app-without-modules">Shiny app without modules</h3>
<p>The module-free version of the Shiny app can be downloaded onto your machine by running this code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">usethis<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use_course</span>(<span class="st" style="color: #20794D;">"https://github.com/charliejhadley/training_shiny-module/raw/master/wdi_indicators_modules/01_without-modules.zip"</span>)</span></code></pre></div>
</div>
<p>Once the RStudio project has opened, let’s take a look at the structure of the <code>ui.R</code> file in the app:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">countries_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(...)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">navbarPage</span>(</span>
<span id="cb2-4">  <span class="st" style="color: #20794D;">"WDI"</span>,</span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;">tabPanel</span>(</span>
<span id="cb2-6">    <span class="st" style="color: #20794D;">"Internet"</span>,</span>
<span id="cb2-7">    <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb2-8">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"internet_country"</span>,</span>
<span id="cb2-9">                  <span class="at" style="color: #657422;">choices =</span> countries_list),</span>
<span id="cb2-10">      ...</span>
<span id="cb2-11">    )</span>
<span id="cb2-12">  ),</span>
<span id="cb2-13">  <span class="fu" style="color: #4758AB;">tabPanel</span>(</span>
<span id="cb2-14">    <span class="st" style="color: #20794D;">"Bank branches"</span>,</span>
<span id="cb2-15">    <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb2-16">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"bank_branches_country"</span>,</span>
<span id="cb2-17">                  <span class="at" style="color: #657422;">choices =</span> countries_list),</span>
<span id="cb2-18">      ...</span>
<span id="cb2-19">    )</span>
<span id="cb2-20">  ),</span>
<span id="cb2-21">  ...</span>
<span id="cb2-22">)</span></code></pre></div>
</div>
<p>We’re essentailly duplicating the same <code>selectInput()</code> in each of our <code>tabPanel()</code>s. If there were <em>many</em> controls being repeated we could make an argument for using modules from this file alone.</p>
<p>Let’s take a look at the <code>server.R</code> file of this app:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="cf" style="color: #003B4F;">function</span>(input, output, session){</span>
<span id="cb3-2">  </span>
<span id="cb3-3">  output<span class="sc" style="color: #5E5E5E;">$</span>internet_timeline <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb3-4">    </span>
<span id="cb3-5">    wdi_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-6">      <span class="fu" style="color: #4758AB;">gg_wdi_indicator_timeline</span>(input<span class="sc" style="color: #5E5E5E;">$</span>internet_country,</span>
<span id="cb3-7">                                ...)</span>
<span id="cb3-8">    </span>
<span id="cb3-9">  })</span>
<span id="cb3-10">  </span>
<span id="cb3-11">  output<span class="sc" style="color: #5E5E5E;">$</span>internet_comparison_table <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderUI</span>({</span>
<span id="cb3-12">    </span>
<span id="cb3-13">    ranking_table <span class="ot" style="color: #003B4F;">&lt;-</span> wdi_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-14">    <span class="fu" style="color: #4758AB;">filter</span>(country <span class="sc" style="color: #5E5E5E;">==</span> input<span class="sc" style="color: #5E5E5E;">$</span>internet_country) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-15">    </span>
<span id="cb3-16">    ranking_table <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-17">        <span class="fu" style="color: #4758AB;">datatable</span>()</span>
<span id="cb3-18">        </span>
<span id="cb3-19">  })</span>
<span id="cb3-20">  </span>
<span id="cb3-21">  output<span class="sc" style="color: #5E5E5E;">$</span>bank_branches_timeline <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb3-22">    </span>
<span id="cb3-23">    wdi_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-24">      <span class="fu" style="color: #4758AB;">gg_wdi_indicator_timeline</span>(input<span class="sc" style="color: #5E5E5E;">$</span>bank_branches_country,</span>
<span id="cb3-25">                              ...)</span>
<span id="cb3-26">    </span>
<span id="cb3-27">  })</span>
<span id="cb3-28">  </span>
<span id="cb3-29">  output<span class="sc" style="color: #5E5E5E;">$</span>bank_branches_comparison_table <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderUI</span>({</span>
<span id="cb3-30">    </span>
<span id="cb3-31">    ranking_table <span class="ot" style="color: #003B4F;">&lt;-</span> wdi_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-32">    <span class="fu" style="color: #4758AB;">filter</span>(country <span class="sc" style="color: #5E5E5E;">==</span> input<span class="sc" style="color: #5E5E5E;">$</span>bank_branches_country) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-33">    ...</span>
<span id="cb3-34">    </span>
<span id="cb3-35">    ranking_table <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-36">        <span class="fu" style="color: #4758AB;">datatable</span>(...)</span>
<span id="cb3-37">        </span>
<span id="cb3-38">  })</span>
<span id="cb3-39">  </span>
<span id="cb3-40">}</span></code></pre></div>
</div>
<p>There’s a lot of duplication in this file. If we wanted to add a new tab about the number of secondary school students, we would have to add all of the following:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## ui.R</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">tabPanel</span>(</span>
<span id="cb4-3">  <span class="st" style="color: #20794D;">"Secondary schools"</span>,</span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"secondary_schools_country"</span>,</span>
<span id="cb4-6">                <span class="at" style="color: #657422;">choices =</span> countries_list),</span>
<span id="cb4-7">    ...</span>
<span id="cb4-8">  )</span>
<span id="cb4-9">)</span>
<span id="cb4-10"><span class="do" style="color: #5E5E5E;
font-style: italic;">## server.R</span></span>
<span id="cb4-11">output<span class="sc" style="color: #5E5E5E;">$</span>secondary_schools_timeline <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb4-12">  </span>
<span id="cb4-13">  wdi_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-14">    <span class="fu" style="color: #4758AB;">gg_wdi_indicator_timeline</span>(input<span class="sc" style="color: #5E5E5E;">$</span>secondary_schools_country,</span>
<span id="cb4-15">                              ...)</span>
<span id="cb4-16">  </span>
<span id="cb4-17">})</span>
<span id="cb4-18"></span>
<span id="cb4-19">output<span class="sc" style="color: #5E5E5E;">$</span>secondary_schools_comparison_table <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderUI</span>({</span>
<span id="cb4-20">  </span>
<span id="cb4-21">  ranking_table <span class="ot" style="color: #003B4F;">&lt;-</span> wdi_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-22">    <span class="fu" style="color: #4758AB;">filter</span>(country <span class="sc" style="color: #5E5E5E;">==</span> input<span class="sc" style="color: #5E5E5E;">$</span>secondary_schools_country) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-23">    ...</span>
<span id="cb4-24">  </span>
<span id="cb4-25">  ranking_table <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-26">    <span class="fu" style="color: #4758AB;">datatable</span>(...)</span>
<span id="cb4-27">  </span>
<span id="cb4-28">})</span></code></pre></div>
</div>
<p>Let’s breakdown the advantages to re-writing this app to use modules.</p>
<section id="what-would-be-the-benefits-of-switching-to-use-modules" class="level4">
<h4 class="anchored" data-anchor-id="what-would-be-the-benefits-of-switching-to-use-modules">What would be the benefits of switching to use modules?</h4>
<ul>
<li><p>Without modules, if we wanted to change the look of the “comparison tables” we would need to do that X times - once for each <code>output$*_comparison_table</code> object.<br> Modules therefore help reduce transcription or copy/paste errors.</p></li>
<li><p>Modules will allow us to change the</p></li>
<li><p>Modules will reduce script file length, making the code easier to read and understand</p></li>
<li><p>Currently, if we wanted to change</p></li>
</ul>
<p>If we needed to add another tab to our</p>
<p>Each time we add a new tab to our shiny app, we’ll need to create a new pair of <code>render*()</code> functions and corresponding inputs in the <code>ui.R</code> file.</p>
<p>By re-designing our app to use modules, we’ll benefit from the following:</p>
<ul>
<li>Reduced script file lenght, improving readability</li>
<li>Simpler feature updates, changing the module code will update all pages at once.</li>
</ul>


</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hadley2019,
  author = {Charlotte Hadley},
  title = {Shiny Modules to Reduce Duplication in Apps},
  date = {2019-07-09},
  url = {https://visibledata.co.uk/posts/2019-07-09-shiny-modules-to-reduce-duplication-in-apps},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hadley2019" class="csl-entry quarto-appendix-citeas">
Charlotte Hadley. 2019. <span>“Shiny Modules to Reduce Duplication in
Apps.”</span> July 9, 2019. <a href="https://visibledata.co.uk/posts/2019-07-09-shiny-modules-to-reduce-duplication-in-apps">https://visibledata.co.uk/posts/2019-07-09-shiny-modules-to-reduce-duplication-in-apps</a>.
</div></div></section></div> ]]></description>
  <category>shiny</category>
  <guid>https://visibledata.co.uk/posts/2019-07-09-shiny-modules-to-reduce-duplication-in-apps/index.html</guid>
  <pubDate>Mon, 08 Jul 2019 23:00:00 GMT</pubDate>
  <media:content url="https://visibledata.co.uk//posts/2019-07-09-shiny-modules-to-reduce-duplication-in-apps/shiny-app-wireframe.png" medium="image" type="image/png" height="125" width="144"/>
</item>
<item>
  <title>Shiny modules for useful controls</title>
  <link>https://visibledata.co.uk/posts/2019-03-25-shiny-modules-for-useful-controls/index.html</link>
  <description><![CDATA[ 




<p><a href="https://shiny.rstudio.com/articles/modules.html">Shiny Modules</a> are an “advanced” feature of Shiny apps that developers can use to reduce code duplication, simplify complex inter-relating controls, allow UI elements to be compartmentalised into R packages… and generally be a Shiny magician.</p>
<p>Much of the stuff written about modules gets lost in the weeds. We’re not going to do that here. We’re going to make the Shiny app I’ve embedded below (as an iframe), both with and without modules.</p>
<iframe width="100%" height="550px" scrolling="no" frameborder="yes" src="https://visibledata.shinyapps.io/shiny-with-modules_gg_ma_timeseries/">
</iframe>
<p>This app is slightly complicated, but deliberately so. I want to give you a real world example of using Shiny modules.</p>
<p>We’ll go through the following steps:</p>
<ol type="1">
<li><p>Data import and wrangling</p></li>
<li><p>server.R skeleton</p></li>
<li><p><code>gg_ma_timeseries()</code></p></li>
</ol>
<section id="how-to-follow-along" class="level2">
<h2 class="anchored" data-anchor-id="how-to-follow-along">How to follow along</h2>
<p>To follow along you are advised to <strong>create a new RStudio Project</strong> and create the files detailed below in turn.</p>
</section>
<section id="whats-the-app" class="level2">
<h2 class="anchored" data-anchor-id="whats-the-app">What’s the app?</h2>
<p>The app allows the viewer to interact with data from the <a href="https://ilabour.oii.ox.ac.uk/online-labour-index/">Online Labour Index</a>. This is a project undertaken by the University of Oxford’s Internet Institute to study the online labour market, and ultimately to provide an economic indicator for the gig economy. The data is deposited on Figshare, which means anyone can access (and importantly, cite) the data with the following DOI: <a href="https://doi.org/10.6084/m9.figshare.3761562">10.6084/m9.figshare.3761562</a>.</p>
</section>
<section id="data-import-wrangling-and-stuff" class="level2">
<h2 class="anchored" data-anchor-id="data-import-wrangling-and-stuff">Data import, wrangling and stuff</h2>
<p>Let’s completely ignore the details of accessing and wrangling the data. This is a tutorial on Shiny modules.</p>
<p>Create yourself a new script file called <code>data-processing.R</code> and insert this code. Please note that when this script is run it will download a dataset that in early 2019 is 37Mb in size, this will double every 3 years<sup>1</sup>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## This code should be inserted into your data-processing.R script</span></span>
<span id="cb1-2">fs_deposit_id <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">3761562</span></span>
<span id="cb1-3">deposit_details <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fs_details</span>(fs_deposit_id)</span>
<span id="cb1-4"></span>
<span id="cb1-5">deposit_details <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unlist</span>(deposit_details<span class="sc" style="color: #5E5E5E;">$</span>files)</span>
<span id="cb1-6">deposit_details <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">split</span>(deposit_details, <span class="fu" style="color: #4758AB;">names</span>(deposit_details)), <span class="at" style="color: #657422;">stringsAsFactors =</span> F)</span>
<span id="cb1-8"></span>
<span id="cb1-9">imported_country_group_data <span class="ot" style="color: #003B4F;">&lt;-</span> deposit_details <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="fu" style="color: #4758AB;">str_detect</span>(name, <span class="st" style="color: #20794D;">"bcountrydata_"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;">pull</span>(download_url) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-12">  <span class="fu" style="color: #4758AB;">read_csv</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-13">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">timestamp =</span> <span class="fu" style="color: #4758AB;">as_date</span>(timestamp)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-14">  <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">date =</span> timestamp)</span>
<span id="cb1-15"></span>
<span id="cb1-16">gigs_by_country_group <span class="ot" style="color: #003B4F;">&lt;-</span> imported_country_group_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-17">  <span class="fu" style="color: #4758AB;">group_by</span>(date, country_group) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-18">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">jobs =</span> <span class="fu" style="color: #4758AB;">sum</span>(count)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-19">  <span class="fu" style="color: #4758AB;">ungroup</span>()</span>
<span id="cb1-20"></span>
<span id="cb1-21">gigs_by_occupation <span class="ot" style="color: #003B4F;">&lt;-</span> imported_country_group_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-22">  <span class="fu" style="color: #4758AB;">group_by</span>(date, occupation) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-23">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">count =</span> <span class="fu" style="color: #4758AB;">sum</span>(count)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-24">  <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">jobs =</span> count) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-25">  <span class="fu" style="color: #4758AB;">ungroup</span>()</span></code></pre></div>
</div>
<p>Please note, we don’t run this code yet. It’s going to be loaded in our <code>server.R</code> file.</p>
</section>
<section id="server.r-skeleton" class="level2">
<h2 class="anchored" data-anchor-id="server.r-skeleton">server.R skeleton</h2>
<p>Here’s the skeleton for our <code>server.R</code> file, go ahead and create this on your machine:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## this is how your server.R file should look</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"shiny"</span>)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"tidyverse"</span>)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"rfigshare"</span>)</span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"lubridate"</span>)</span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"xts"</span>)</span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"ggsci"</span>)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="fu" style="color: #4758AB;">source</span>(<span class="st" style="color: #20794D;">"data-processing.R"</span>, <span class="at" style="color: #657422;">local =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="cf" style="color: #003B4F;">function</span>(input, output, session){</span>
<span id="cb2-12">  </span>
<span id="cb2-13">  </span>
<span id="cb2-14">}</span></code></pre></div>
</div>
<p>Some things to note about our file:</p>
<ul>
<li><p>We’ve loaded all of the packages needed for the whole app, not just the data wrangling.</p></li>
<li><p>We’ve used <code>source()</code> to run the data wrangling script when the Shiny app loads</p></li>
<li><p>Our shiny server function contains <strong>three</strong> arguments. Many Shiny tutorials ommit the <code>session</code> argument, but it’s integral for Shiny modules to work correctly.</p></li>
</ul>
<p>We’re about to run our script file, but first <strong>register for a Figshare.com account</strong> so you can use the <code>rfigshare</code> package. Now <strong>run this script</strong>.</p>
</section>
<section id="gg_ma_timeseries" class="level2">
<h2 class="anchored" data-anchor-id="gg_ma_timeseries">gg_ma_timeseries</h2>
<p>Let’s assume for a minute that the dataviz we’re creating here is important enough that we might want to use it in other places than just this Shiny app. The easiest way to support this is by placing the script for the dataviz in its own file.</p>
<p>Create a new file called <code>gg_ma_timeseries.R</code> and add the following code, we’ll walk through the potentially mysterious <code>enquo</code> part of the functions in two minutes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## this is how your gg_ma_timeseries.R file should look</span></span>
<span id="cb3-2">gg_ma_timeseries <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(.data, date, value, category) {</span>
<span id="cb3-3">  date <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">enquo</span>(date)</span>
<span id="cb3-4">  </span>
<span id="cb3-5">  value <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">enquo</span>(value)</span>
<span id="cb3-6">  </span>
<span id="cb3-7">  category <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">enquo</span>(category)</span>
<span id="cb3-8">  </span>
<span id="cb3-9">  n_colours <span class="ot" style="color: #003B4F;">&lt;-</span> .data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;">pull</span>(<span class="sc" style="color: #5E5E5E;">!!</span>category) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-11">    <span class="fu" style="color: #4758AB;">unique</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-12">    <span class="fu" style="color: #4758AB;">length</span>()</span>
<span id="cb3-13">  </span>
<span id="cb3-14">  colours_from_startrek <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">colorRampPalette</span>(<span class="fu" style="color: #4758AB;">pal_startrek</span>(<span class="at" style="color: #657422;">palette =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"uniform"</span>))(<span class="dv" style="color: #AD0000;">7</span>))(n_colours)</span>
<span id="cb3-15">  </span>
<span id="cb3-16">  </span>
<span id="cb3-17">  .data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-18">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb3-19">      <span class="at" style="color: #657422;">x =</span> <span class="sc" style="color: #5E5E5E;">!!</span>date,</span>
<span id="cb3-20">      <span class="at" style="color: #657422;">y =</span> <span class="sc" style="color: #5E5E5E;">!!</span>value,</span>
<span id="cb3-21">      <span class="at" style="color: #657422;">color =</span> <span class="sc" style="color: #5E5E5E;">!!</span>category</span>
<span id="cb3-22">    )) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-23">    <span class="fu" style="color: #4758AB;">geom_line</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-24">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-25">    <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #657422;">values =</span> colours_from_startrek) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-26">    <span class="fu" style="color: #4758AB;">scale_x_date</span>(<span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.01</span>, <span class="fl" style="color: #AD0000;">0.01</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-27">    <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.01</span>, <span class="dv" style="color: #AD0000;">0</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-28">    <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb3-29">      <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Example dataviz of Online Labour Index data"</span>,</span>
<span id="cb3-30">      <span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">"DOI:10.6084/m9.figshare.376156"</span>)</span>
<span id="cb3-31">}</span>
<span id="cb3-32"></span>
<span id="cb3-33">ma_job_count <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(.data, date, value, category, window_width){</span>
<span id="cb3-34">  </span>
<span id="cb3-35">  date <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">enquo</span>(date)</span>
<span id="cb3-36">  </span>
<span id="cb3-37">  value <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">enquo</span>(value)</span>
<span id="cb3-38">  </span>
<span id="cb3-39">  category <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">enquo</span>(category)</span>
<span id="cb3-40">  </span>
<span id="cb3-41">  window_width <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(window_width)</span>
<span id="cb3-42">  </span>
<span id="cb3-43">  .data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-44">    <span class="fu" style="color: #4758AB;">group_by</span>(<span class="sc" style="color: #5E5E5E;">!!</span>category) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-45">    <span class="fu" style="color: #4758AB;">arrange</span>(<span class="sc" style="color: #5E5E5E;">!!</span>date) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-46">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="sc" style="color: #5E5E5E;">!!</span><span class="at" style="color: #657422;">value :=</span> <span class="fu" style="color: #4758AB;">rollmean</span>(<span class="sc" style="color: #5E5E5E;">!!</span>value,</span>
<span id="cb3-47">                           <span class="at" style="color: #657422;">k =</span> window_width,</span>
<span id="cb3-48">                           <span class="at" style="color: #657422;">na.pad =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb3-49">                           <span class="at" style="color: #657422;">align =</span> <span class="st" style="color: #20794D;">"right"</span></span>
<span id="cb3-50">    )) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-51">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(<span class="sc" style="color: #5E5E5E;">!!</span>value)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-52">    <span class="fu" style="color: #4758AB;">ungroup</span>()</span>
<span id="cb3-53">  </span>
<span id="cb3-54">}</span></code></pre></div>
</div>
<ul>
<li><p><code>gg_ma_timeseries()</code> is the function which creates our <code>ggplot2</code> timeseries dataviz</p></li>
<li><p><code>ma_job_count()</code> is a little utility function for smoothing the data with <code>xts::rollmean()</code>.</p></li>
</ul>
<p>Let’s load this file in our <code>server.R</code> script, so the file now has all of the code in it from before. <strong>Run this entire script</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## this is how your server.R file should look</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"shiny"</span>)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"tidyverse"</span>)</span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"rfigshare"</span>)</span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"lubridate"</span>)</span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"xts"</span>)</span>
<span id="cb4-7"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"ggsci"</span>)</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="fu" style="color: #4758AB;">source</span>(<span class="st" style="color: #20794D;">"data-processing.R"</span>, <span class="at" style="color: #657422;">local =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="fu" style="color: #4758AB;">source</span>(<span class="st" style="color: #20794D;">"gg_ma_timeseries.R"</span>, <span class="at" style="color: #657422;">local =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="cf" style="color: #003B4F;">function</span>(input, output, session){</span>
<span id="cb4-14">  </span>
<span id="cb4-15">  </span>
<span id="cb4-16">}</span></code></pre></div>
</div>
<p>I want to prove to you that this works. Create a new script file <code>scratch-pad.R</code> where we can experiment and play. Add the following code, and then <strong>run the script</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## this is how your scratch-pad.R file should look</span></span>
<span id="cb5-2">gigs_by_occupation <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">ma_job_count</span>(date, jobs, occupation, <span class="dv" style="color: #AD0000;">28</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">gg_ma_timeseries</span>(date, jobs, occupation)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://visibledata.co.uk/posts/2019-03-25-shiny-modules-for-useful-controls/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Notice how the column names <code>jobs</code>, <code>occupation</code> and <code>date</code> have been given to <code>gg_ma_timeseries</code> without quotation marks? This is exactly the same as how we use functions from <code>dplyr</code>, e.g.&nbsp;<code>iris %&gt;% mutate(species = toupper(species))</code>. These are what we call <strong>naked column names</strong>.</p>
<p>That’s why the functions use <code>enquo()</code> internally, it’s implementing non-standard evaluation with <a href="https://tidyeval.tidyverse.org">tidyeval</a>. However, there’s zero need to understand this now (if you don’t want to). This is a Shiny module tutorial, so let’s move on to the <code>ui.R</code> file.</p>
</section>
<section id="ui.r-skeleton" class="level2">
<h2 class="anchored" data-anchor-id="ui.r-skeleton">ui.R skeleton</h2>
<p>Here’s the skeleton for our <code>ui.R</code> file, go ahead and create this on your machine:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## this is how your ui.R file should look</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"shiny"</span>)</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"shinycustomloader"</span>)</span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;">shinyServer</span>(<span class="fu" style="color: #4758AB;">navbarPage</span>(</span>
<span id="cb6-5">  <span class="st" style="color: #20794D;">"Shiny Modules"</span>,</span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;">tabPanel</span>(</span>
<span id="cb6-7">    <span class="st" style="color: #20794D;">"By occupation"</span>,</span>
<span id="cb6-8">    <span class="fu" style="color: #4758AB;">fluidPage</span>()</span>
<span id="cb6-9">  ),</span>
<span id="cb6-10">  <span class="fu" style="color: #4758AB;">tabPanel</span>(</span>
<span id="cb6-11">    <span class="st" style="color: #20794D;">"By country"</span>,</span>
<span id="cb6-12">    <span class="fu" style="color: #4758AB;">fluidPage</span>()</span>
<span id="cb6-13">  )</span>
<span id="cb6-14">))</span></code></pre></div>
</div>
</section>
<section id="shiny-app-without-modules" class="level2">
<h2 class="anchored" data-anchor-id="shiny-app-without-modules">Shiny app without modules</h2>
<p>A complete copy of this Shiny app that doesn’t use modules is available on Github here: <a href="https://github.com/charliejhadley/training_shiny-module/tree/master/gg_ma_timeseries/shiny-without-modules">https://github.com/charliejhadley/training_shiny-module/tree/master/gg_ma_timeseries/shiny-without-modules</a>.</p>
<p>There’s a tremendous amount of duplication in the <code>ui.R</code> file to get the <code>radioButtons()</code> to look how I want them to. We need to use Shiny modules to simplify this, which we’ll do in the section below.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## DO NOT COPY THIS CODE.</span></span>
<span id="cb7-2"><span class="do" style="color: #5E5E5E;
font-style: italic;">## This is how the ui.R file looks without using modules.</span></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"shiny"</span>)</span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"shinycustomloader"</span>)</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="fu" style="color: #4758AB;">shinyServer</span>(<span class="fu" style="color: #4758AB;">navbarPage</span>(</span>
<span id="cb7-7">  <span class="st" style="color: #20794D;">"Shiny without Modules"</span>,</span>
<span id="cb7-8">  <span class="fu" style="color: #4758AB;">tabPanel</span>(</span>
<span id="cb7-9">    <span class="st" style="color: #20794D;">"By occupation"</span>,</span>
<span id="cb7-10">    <span class="fu" style="color: #4758AB;">fluidPage</span>(<span class="fu" style="color: #4758AB;">fluidRow</span>(<span class="fu" style="color: #4758AB;">column</span>(</span>
<span id="cb7-11">      <span class="fu" style="color: #4758AB;">radioButtons</span>(</span>
<span id="cb7-12">        <span class="st" style="color: #20794D;">"by_occupation_landing_rollmean_k"</span>,</span>
<span id="cb7-13">        <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">""</span>,</span>
<span id="cb7-14">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb7-15">          <span class="st" style="color: #20794D;">"Show daily value"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb7-16">          <span class="st" style="color: #20794D;">"Show 28-day moving average"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">28</span></span>
<span id="cb7-17">        ),</span>
<span id="cb7-18">        <span class="at" style="color: #657422;">selected =</span> <span class="dv" style="color: #AD0000;">28</span>,</span>
<span id="cb7-19">        <span class="at" style="color: #657422;">inline =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb7-20">      ),</span>
<span id="cb7-21">      <span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">12</span></span>
<span id="cb7-22">    )),</span>
<span id="cb7-23">    <span class="fu" style="color: #4758AB;">withLoader</span>(<span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"gg_gigs_by_occupation"</span>)),</span>
<span id="cb7-24">    <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"html"</span>, <span class="at" style="color: #657422;">loader =</span> <span class="st" style="color: #20794D;">"dnaspin"</span></span>
<span id="cb7-25">    )</span>
<span id="cb7-26">  ),</span>
<span id="cb7-27">  <span class="fu" style="color: #4758AB;">tabPanel</span>(</span>
<span id="cb7-28">    <span class="st" style="color: #20794D;">"By country"</span>,</span>
<span id="cb7-29">    <span class="fu" style="color: #4758AB;">fluidPage</span>(<span class="fu" style="color: #4758AB;">fluidRow</span>(<span class="fu" style="color: #4758AB;">column</span>(</span>
<span id="cb7-30">      <span class="fu" style="color: #4758AB;">radioButtons</span>(</span>
<span id="cb7-31">        <span class="st" style="color: #20794D;">"by_country_group_landing_rollmean_k"</span>,</span>
<span id="cb7-32">        <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">""</span>,</span>
<span id="cb7-33">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb7-34">          <span class="st" style="color: #20794D;">"Show daily value"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb7-35">          <span class="st" style="color: #20794D;">"Show 28-day moving average"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">28</span></span>
<span id="cb7-36">        ),</span>
<span id="cb7-37">        <span class="at" style="color: #657422;">selected =</span> <span class="dv" style="color: #AD0000;">28</span>,</span>
<span id="cb7-38">        <span class="at" style="color: #657422;">inline =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb7-39">      ),</span>
<span id="cb7-40">      <span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">12</span></span>
<span id="cb7-41">    )),</span>
<span id="cb7-42">    <span class="fu" style="color: #4758AB;">withLoader</span>(<span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"gg_gigs_by_country_group"</span>)),</span>
<span id="cb7-43">    <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"html"</span>, <span class="at" style="color: #657422;">loader =</span> <span class="st" style="color: #20794D;">"dnaspin"</span></span>
<span id="cb7-44">    )</span>
<span id="cb7-45">  )</span>
<span id="cb7-46">))</span></code></pre></div>
</div>
<p>The <code>server.R</code> file is fairly tidy because we’ve already abstracted a lot of the app into functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## DO NOT COPY THIS CODE.</span></span>
<span id="cb8-2"><span class="do" style="color: #5E5E5E;
font-style: italic;">## This is how the server.R file looks without using modules.</span></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"shiny"</span>)</span>
<span id="cb8-4"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"tidyverse"</span>)</span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"rfigshare"</span>)</span>
<span id="cb8-6"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"lubridate"</span>)</span>
<span id="cb8-7"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"xts"</span>)</span>
<span id="cb8-8"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"ggsci"</span>)</span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="fu" style="color: #4758AB;">source</span>(<span class="st" style="color: #20794D;">"data-processing.R"</span>, <span class="at" style="color: #657422;">local =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="fu" style="color: #4758AB;">source</span>(<span class="st" style="color: #20794D;">"gg_ma_timeseries.R"</span>, <span class="at" style="color: #657422;">local =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb8-13"></span>
<span id="cb8-14"><span class="cf" style="color: #003B4F;">function</span>(input, output, session) {</span>
<span id="cb8-15">  output<span class="sc" style="color: #5E5E5E;">$</span>gg_gigs_by_occupation <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb8-16">    </span>
<span id="cb8-17">    gigs_by_occupation <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb8-18">      <span class="fu" style="color: #4758AB;">ma_job_count</span>(date, jobs, occupation, input<span class="sc" style="color: #5E5E5E;">$</span>by_occupation_landing_rollmean_k) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb8-19">      <span class="fu" style="color: #4758AB;">gg_ma_timeseries</span>(date, jobs, occupation)</span>
<span id="cb8-20">    </span>
<span id="cb8-21">  })</span>
<span id="cb8-22"></span>
<span id="cb8-23">  output<span class="sc" style="color: #5E5E5E;">$</span>gg_gigs_by_country_group <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb8-24">    </span>
<span id="cb8-25">    gigs_by_country_group <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb8-26">      <span class="fu" style="color: #4758AB;">ma_job_count</span>(date, jobs, country_group, input<span class="sc" style="color: #5E5E5E;">$</span>by_country_group_landing_rollmean_k) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb8-27">      <span class="fu" style="color: #4758AB;">gg_ma_timeseries</span>(date, jobs, country_group)</span>
<span id="cb8-28">    </span>
<span id="cb8-29">  })</span>
<span id="cb8-30">}</span></code></pre></div>
</div>
</section>
<section id="introducing-the-shiny-module" class="level2">
<h2 class="anchored" data-anchor-id="introducing-the-shiny-module">Introducing the Shiny Module</h2>
<p>The Shiny Module is composed of two components:</p>
<ul>
<li><code>gg_ma_timeseries_input()</code> creates an instance of our controls.</li>
<li><code>gg_ma_timeseries_output()</code> creates an instance of the chart, which is dependent on a set of controls (specified in the server.R file).</li>
</ul>
<center>
<img src="https://visibledata.co.uk/blog/2019-03-25-shiny-modules-for-useful-controls_files/the-whole-module.png" class="img-fluid" width="450">
</center>
<p>It’s crucial that we place the code for these elements of the module in the correct place:</p>
<center>
<img src="https://visibledata.co.uk/blog/2019-03-25-shiny-modules-for-useful-controls_files/where-things-live.png" class="img-fluid" width="450">
</center>
<section id="rules-for-modules" class="level3">
<h3 class="anchored" data-anchor-id="rules-for-modules">Rules for modules</h3>
<p>This is one of the things left out of the other Shiny module tutorials I’ve read. Most tutorials deal with a toy example and don’t split the code into distinct <code>ui.R</code> and <code>server.R</code> files. Let’s establish some hard and fast rules about modules:</p>
<ul>
<li><p>Place your module code in a subfolder called <code>/modules</code>.</p></li>
<li><p>Code for inputs (controls) must be sourced in the <code>ui.R</code> file.</p></li>
<li><p>Code for outputs (charts) must be sourced in the <code>server.R</code> file.</p></li>
</ul>
</section>
</section>
<section id="namespaces-with-ns" class="level2">
<h2 class="anchored" data-anchor-id="namespaces-with-ns">Namespaces with <code>NS</code></h2>
<p>Remember our <code>server.R</code> function?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output, session){</span>
<span id="cb9-2">  </span>
<span id="cb9-3">}</span></code></pre></div>
</div>
<p>Inside of our modules we need to manipulate values from both the <code>input</code> and <code>output</code> objects. In programming speak, we need to be careful about namespaces. In Shiny, this means we need to use the <code>NS()</code> function to guarantee we’re refering to the values we think we’re refering to. Let’s create the control for our modules, in a new script file: <code>/modules/client-side_gg-ma-timeseries.R</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## This is how your /modules/client-side_gg-ma-timeseries.R file should look</span></span>
<span id="cb10-2">gg_ma_timeseries_input <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(id) {</span>
<span id="cb10-3">  ns <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">NS</span>(id)</span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;">tagList</span>(</span>
<span id="cb10-5">    <span class="st" style="color: #20794D;">"This entire tab is a shiny module, including; this text, the radio buttons and the chart."</span>,</span>
<span id="cb10-6">    <span class="fu" style="color: #4758AB;">fluidRow</span>(<span class="fu" style="color: #4758AB;">column</span>(</span>
<span id="cb10-7">      <span class="fu" style="color: #4758AB;">radioButtons</span>(</span>
<span id="cb10-8">        <span class="fu" style="color: #4758AB;">ns</span>(<span class="st" style="color: #20794D;">"landing_rollmean_k"</span>),</span>
<span id="cb10-9">        <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">""</span>,</span>
<span id="cb10-10">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb10-11">          <span class="st" style="color: #20794D;">"Show daily value"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb10-12">          <span class="st" style="color: #20794D;">"Show 28-day moving average"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">28</span></span>
<span id="cb10-13">        ),</span>
<span id="cb10-14">        <span class="at" style="color: #657422;">selected =</span> <span class="dv" style="color: #AD0000;">28</span>,</span>
<span id="cb10-15">        <span class="at" style="color: #657422;">inline =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb10-16">      ),</span>
<span id="cb10-17">      <span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">12</span></span>
<span id="cb10-18">    ))</span>
<span id="cb10-19">  )</span>
<span id="cb10-20">}</span></code></pre></div>
</div>
<p>Things to take away from the <code>gg_ma_timeseries_input()</code> function:</p>
<ul>
<li><p><code>ns &lt;- NS(id)</code> ensures we’re refering to values from the server <code>input</code> object</p></li>
<li><p><code>ns("landing_rollmean_k")</code> translates to <code>input$landing_rollmean_k</code></p></li>
<li><p>If returning <strong>multiple ui elements</strong> they must be contained within <code>tagList()</code>… <em>but</em> it’s a great idea to use <code>tagList()</code> by default, it will prevent mishaps.</p></li>
</ul>
<p>That’s our control. We need to create our output function that will display the chart rendered by the server, which we’ll call <code>gg_ma_timeseries_output()</code>. It takes a while to download and display the data in our chart, so it’s a good idea to use the excellent [<code>shinycustomloader</code>] package to show an animated “loading” GIF to the user. Please update your <code>/modules/client-side_gg-ma-timeseries.R</code> file so it looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## This is how your /modules/client-side_gg-ma-timeseries.R file should look</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"shinycustomloader"</span>)</span>
<span id="cb11-3"></span>
<span id="cb11-4">gg_ma_timeseries_input <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(id) {</span>
<span id="cb11-5">  ns <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">NS</span>(id)</span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;">tagList</span>(</span>
<span id="cb11-7">    <span class="st" style="color: #20794D;">"This entire tab is a shiny module, including; this text, the radio buttons and the chart."</span>,</span>
<span id="cb11-8">    <span class="fu" style="color: #4758AB;">fluidRow</span>(<span class="fu" style="color: #4758AB;">column</span>(</span>
<span id="cb11-9">      <span class="fu" style="color: #4758AB;">radioButtons</span>(</span>
<span id="cb11-10">        <span class="fu" style="color: #4758AB;">ns</span>(<span class="st" style="color: #20794D;">"landing_rollmean_k"</span>),</span>
<span id="cb11-11">        <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">""</span>,</span>
<span id="cb11-12">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb11-13">          <span class="st" style="color: #20794D;">"Show daily value"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb11-14">          <span class="st" style="color: #20794D;">"Show 28-day moving average"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">28</span></span>
<span id="cb11-15">        ),</span>
<span id="cb11-16">        <span class="at" style="color: #657422;">selected =</span> <span class="dv" style="color: #AD0000;">28</span>,</span>
<span id="cb11-17">        <span class="at" style="color: #657422;">inline =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb11-18">      ),</span>
<span id="cb11-19">      <span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">12</span></span>
<span id="cb11-20">    ))</span>
<span id="cb11-21">  )</span>
<span id="cb11-22">}</span>
<span id="cb11-23"></span>
<span id="cb11-24">gg_ma_timeseries_output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(id) {</span>
<span id="cb11-25">  ns <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">NS</span>(id)</span>
<span id="cb11-26">  <span class="fu" style="color: #4758AB;">withLoader</span>(<span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="fu" style="color: #4758AB;">ns</span>(<span class="st" style="color: #20794D;">"ma_plot"</span>)), <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"html"</span>, <span class="at" style="color: #657422;">loader =</span> <span class="st" style="color: #20794D;">"dnaspin"</span>)</span>
<span id="cb11-27">}</span></code></pre></div>
</div>
<p>Our output function is more complex than our input, because <code>ns("ma_plot")</code> refers to an instace of <code>output$ma_plot</code> from the Shiny module, which we haven’t created yet</p>
<p>The trick to how <code>NS()</code> works inside of <code>gg_ma_timeseries_output()</code> is more complicated than our input function, and is explained in the section below. However, let’s</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## This is how your ui.R file should look</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"shiny"</span>)</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="fu" style="color: #4758AB;">source</span>(<span class="st" style="color: #20794D;">"modules/client-side_gg-ma-timeseries.R"</span>, <span class="at" style="color: #657422;">local =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="fu" style="color: #4758AB;">shinyServer</span>(<span class="fu" style="color: #4758AB;">navbarPage</span>(</span>
<span id="cb12-7">  <span class="st" style="color: #20794D;">"Shiny Modules"</span>,</span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;">tabPanel</span>(</span>
<span id="cb12-9">    <span class="st" style="color: #20794D;">"By occupation"</span>,</span>
<span id="cb12-10">    <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb12-11">      <span class="fu" style="color: #4758AB;">gg_ma_timeseries_input</span>(<span class="st" style="color: #20794D;">"occupation_controls"</span>),</span>
<span id="cb12-12">      <span class="fu" style="color: #4758AB;">gg_ma_timeseries_output</span>(<span class="st" style="color: #20794D;">"occupation_chart"</span>)</span>
<span id="cb12-13">    )</span>
<span id="cb12-14">  ),</span>
<span id="cb12-15">  <span class="fu" style="color: #4758AB;">tabPanel</span>(</span>
<span id="cb12-16">    <span class="st" style="color: #20794D;">"By country"</span>,</span>
<span id="cb12-17">    <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb12-18">      <span class="fu" style="color: #4758AB;">gg_ma_timeseries_input</span>(<span class="st" style="color: #20794D;">"by_country_controls"</span>),</span>
<span id="cb12-19">      <span class="fu" style="color: #4758AB;">gg_ma_timeseries_output</span>(<span class="st" style="color: #20794D;">"by_country_chart"</span>)</span>
<span id="cb12-20">    )</span>
<span id="cb12-21">  )</span>
<span id="cb12-22">))</span></code></pre></div>
</div>
<ul>
<li><p>We’re going to be extracting</p></li>
<li><p><code>ns &lt;- NS(id)</code> ensures we’re</p></li>
<li><p><code>ns("ma_plot")</code></p></li>
</ul>
</section>
<section id="things-they-dont-tell-you" class="level2">
<h2 class="anchored" data-anchor-id="things-they-dont-tell-you">Things they don’t tell you</h2>
<ul>
<li><p>Load the ui in the ui.R file</p></li>
<li><p>Delete the scratch-pad.R file</p></li>
</ul>
<!-- <blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Imagine you&#39;re following an R tutorial that includes<br><br>read_csv(&quot;http://online_csv&quot;)<br><br>How large would that csv need to be before you&#39;d want a warning written into the tutorial?</p>&mdash; Charlie Joey Hadley (@charliejhadley) <a href="https://twitter.com/charliejhadley/status/1110203236177334278?ref_src=twsrc%5Etfw">March 25, 2019</a></blockquote> -->
<!-- <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"> -->
<!-- </script> -->


</section>


<div id="quarto-appendix" class="default"><section class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I was interested in how important file size warnings are in tutorials, my <a href="https://twitter.com/charliejhadley/status/1110203236177334278">Twitter poll revealed that most folks wanted a warning for files bigger than 10Mb</a>↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hadley2019,
  author = {Charlotte Hadley},
  title = {Shiny Modules for Useful Controls},
  date = {2019-03-25},
  url = {https://visibledata.co.uk/posts/2019-03-25-shiny-modules-for-useful-controls},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hadley2019" class="csl-entry quarto-appendix-citeas">
Charlotte Hadley. 2019. <span>“Shiny Modules for Useful
Controls.”</span> March 25, 2019. <a href="https://visibledata.co.uk/posts/2019-03-25-shiny-modules-for-useful-controls">https://visibledata.co.uk/posts/2019-03-25-shiny-modules-for-useful-controls</a>.
</div></div></section></div> ]]></description>
  <category>shiny</category>
  <guid>https://visibledata.co.uk/posts/2019-03-25-shiny-modules-for-useful-controls/index.html</guid>
  <pubDate>Mon, 25 Mar 2019 00:00:00 GMT</pubDate>
  <media:content url="https://visibledata.co.uk//posts/2019-03-25-shiny-modules-for-useful-controls/shiny-modules-reusable-controls.png" medium="image" type="image/png" height="82" width="144"/>
</item>
<item>
  <title>One weird regex matches 97% of DOI…</title>
  <link>https://visibledata.co.uk/posts/2019-03-13_extracting-doi-from-text/index.html</link>
  <description><![CDATA[ 




<p>At least once a month I’m tasked with something that involves working with DOI, but I’ve never bothered to write a function for extracting these from texts. Time to end that by putting together a tidyversesque <code>add_doi()</code> function!</p>
<p>… wait, why?</p>
<p>The <a href="https://r4ds.had.co.nz/functions.html">R for Data Science</a> book has lots of excellent advice, including this snippet about reducing duplicated code by writing functions:</p>
<p><img src="https://visibledata.co.uk/posts/2019-03-13_extracting-doi-from-text/when-to-write-a-function.png" class="img-fluid" alt="" width="550"></p>
<p>So, what are DOI? DOI (Digital Object Identifiers) are the gold standard for citations. They’re guaranteed to point directly to the resource you care about. But how can we reliably extracting DOI from, for example, the following references?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"tidyverse"</span>)</span>
<span id="cb1-2">example_references <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;">text_citation =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'Gueorgi Kossinets and Duncan J. Watts, "Origins of Homophily in an Evolving Social Network," American Journal of Sociology 115 (2009):414, accessed December 5, 2014, doi:10.1086/599247'</span>,</span>
<span id="cb1-4">                        <span class="st" style="color: #20794D;">'Morey, C. C., Cong, Y., Zheng, Y., Price, M., &amp; Morey, R. D. (2015). The color-sharing bonus: Roles of perceptual organization and attentive processes in visual working memory. Archives of Scientific Psychology, 3, 18–29. https://doi.org/10.1037/arc0000014'</span>,</span>
<span id="cb1-5">                        <span class="st" style="color: #20794D;">'Barros, B., Read, T. &amp; Verdejo, M. F. (2008) Virtual collaborative experimentation:</span></span>
<span id="cb1-6"><span class="st" style="color: #20794D;">an approach combining remote and local labs. IEEE Transactions on Education. 51 (2),</span></span>
<span id="cb1-7"><span class="st" style="color: #20794D;">242–250. Available from: doi:10.1109/TE.2007.908071'</span>))</span></code></pre></div>
</div>
<p>CrossRef have a great blogpost about how to <a href="https://www.crossref.org/blog/dois-and-matching-regular-expressions/">match DOIs using regular expressions</a> where they recommend the following regex, which matches 97% of the 74.9 million DOI they tested. The majority of the ~500,000 not matched by this regex are from the <em>bad old days</em> of the early noughties, and outside of our interest.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">doi_regex <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"10.</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">d{4,9}/[-._;()/:a-z0-9A-Z]+"</span></span></code></pre></div>
</div>
<p>Using <code>str_extract()</code> from the tidyverse package <code>stringr</code> allows us to extract the DOIs from our reference:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">example_references <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">doi =</span> <span class="fu" style="color: #4758AB;">str_extract</span>(text_citation, doi_regex))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  text_citation                                                            doi  
  &lt;chr&gt;                                                                    &lt;chr&gt;
1 "Gueorgi Kossinets and Duncan J. Watts, \"Origins of Homophily in an Ev… 10.1…
2 "Morey, C. C., Cong, Y., Zheng, Y., Price, M., &amp; Morey, R. D. (2015). T… 10.1…
3 "Barros, B., Read, T. &amp; Verdejo, M. F. (2008) Virtual collaborative exp… 10.1…</code></pre>
</div>
</div>
<p>This can all be rolled together into a function; <code>add_doi()</code>. If you’re unfamiliar with <code>!!</code>, <code>enquo</code> and <code>:=</code> that’s because I’m using <code>tidyeval</code>, <a href="https://tidyeval.tidyverse.org/modifying-inputs.html">find out more about tidyeval here</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">add_doi <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(.data, citation_column, <span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"doi"</span>) {</span>
<span id="cb5-2">  citation_column <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">enquo</span>(citation_column)</span>
<span id="cb5-3"></span>
<span id="cb5-4">  <span class="cf" style="color: #003B4F;">if</span> (name <span class="sc" style="color: #5E5E5E;">!=</span> <span class="st" style="color: #20794D;">"n"</span> <span class="sc" style="color: #5E5E5E;">&amp;&amp;</span> name <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">colnames</span>(.data)) {</span>
<span id="cb5-5">    rlang<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">abort</span>(glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(<span class="st" style="color: #20794D;">"Column `{name}` already exists in the data"</span>))</span>
<span id="cb5-6">  }</span>
<span id="cb5-7">  </span>
<span id="cb5-8">  .data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-9">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="sc" style="color: #5E5E5E;">!!</span><span class="at" style="color: #657422;">name :=</span> <span class="fu" style="color: #4758AB;">str_extract</span>(<span class="sc" style="color: #5E5E5E;">!!</span>citation_column, <span class="st" style="color: #20794D;">"10.</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">d{4,9}/[-._;()/:a-z0-9A-Z]+"</span>))</span>
<span id="cb5-10">}</span></code></pre></div>
</div>
<p>Because the function is written with <code>tidyeval</code> I can use <em>naked column names</em> just as a I would with <code>dplyr::add_count()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">example_references <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">add_doi</span>(text_citation)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  text_citation                                                            doi  
  &lt;chr&gt;                                                                    &lt;chr&gt;
1 "Gueorgi Kossinets and Duncan J. Watts, \"Origins of Homophily in an Ev… 10.1…
2 "Morey, C. C., Cong, Y., Zheng, Y., Price, M., &amp; Morey, R. D. (2015). T… 10.1…
3 "Barros, B., Read, T. &amp; Verdejo, M. F. (2008) Virtual collaborative exp… 10.1…</code></pre>
</div>
</div>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hadley2019,
  author = {Charlotte Hadley},
  title = {One Weird Regex Matches 97\% of {DOI...}},
  date = {2019-03-13},
  url = {https://visibledata.co.uk/posts/2019-03-13_extracting-doi-from-text},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hadley2019" class="csl-entry quarto-appendix-citeas">
Charlotte Hadley. 2019. <span>“One Weird Regex Matches 97% of
DOI...”</span> March 13, 2019. <a href="https://visibledata.co.uk/posts/2019-03-13_extracting-doi-from-text">https://visibledata.co.uk/posts/2019-03-13_extracting-doi-from-text</a>.
</div></div></section></div> ]]></description>
  <category>reproducible research</category>
  <guid>https://visibledata.co.uk/posts/2019-03-13_extracting-doi-from-text/index.html</guid>
  <pubDate>Wed, 13 Mar 2019 00:00:00 GMT</pubDate>
  <media:content url="https://visibledata.co.uk//posts/softblock-demo/three-designs.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Where is the centre of University of Oxford?</title>
  <link>https://visibledata.co.uk/posts/2019-02-18_oxford-centres/index.html</link>
  <description><![CDATA[ 




<style>
.panel-heading .accordion-toggle:after {
    /* symbol for "opening" panels */
    font-family: 'Glyphicons Halflings';  /* essential for enabling glyphicon */
    content: "\e114";    /* adjust as needed, taken from bootstrap.css */
    float: right;        /* adjust as needed */
    color: grey;         /* adjust as needed */
}
.panel-heading .accordion-toggle.collapsed:after {
    /* symbol for "collapsed" panels */
    content: "\e080";    /* adjust as needed, taken from bootstrap.css */
}
</style>
<div class="cell">

</div>
<p>My team at University of Oxford provide research data management and reproducible research advice to researchers across the whole of the University. A fairly common point of contention is where should we meet, and where is the centre of the University?</p>
<p>We broadly agreed that the centre of the University should be calculated as the (weighted) centre of mass of specific buildings or campuses within the University. Two of our favourite options were:</p>
<ul>
<li>Centre of mass of all colleges</li>
<li>Centre of mass of the University divisions</li>
</ul>
<p>In this blogpost I go through all the steps of scraping and combining data from the OxPoints service and Wikipedia to create the chart below:</p>
<ul class="nav nav-tabs">
<li class="active">
Centres through time
</li>
<li>
Obligatory GIF
</li>
</ul>
<div class="tab-content">
<section id="including-plots" class="level2 tab-pane tabbed-pane active">
<p><img src="https://visibledata.co.uk/posts/2019-02-18_oxford-centres/gg_centres_through_time.png" class="img-fluid" data-max-width="530px"></p>
</section>
<section id="and-more" class="level2 tab-pane tabbed-pane">
<p><img src="https://visibledata.co.uk/blog/2019-02-18-oxford-centres_files/oxford-centres.gif" class="img-fluid" data-max-width="530px"></p>
</section>
</div>
<p>There are many steps to this process. I’ve decided to experiment with an accordion layout for this post, so it’s not immediately obvious how long the post is!</p>
<section id="how-to-follow-along" class="level3">
<h3 class="anchored" data-anchor-id="how-to-follow-along">How to follow along</h3>
<p>If you want to follow along, please follow these steps first:</p>
<ol type="1">
<li><p>Create a new RStudio project</p></li>
<li><p>Create a data directory by running <code>dir.create("data")</code></p></li>
<li><p>Create a script file in the <code>data</code> directory called <code>obtain-oxpoints-data.R</code>, we’ll use this to scrape data from Oxpoint.</p></li>
</ol>
<div class="panel-group" id="accordion">

<div class="panel panel-default">
<div class="panel-heading">
<h4 class="panel-title anchored">
 Get data from OxPoints 
</h4>
</div>
<div id="oxpoints" class="panel-collapse collapse in">
<div class="panel-body">
<p>OxPoints is a tool for <a href="https://help.it.ox.ac.uk/oxpoints/index">accessing geographic information about University of Oxford</a> and was mostly put together by my friend and ex-colleague <a href="https://twitter.com/alexsdutton">Alex Dutton</a>. Now I’ve highlighted Alex is a friend, I can be slightly more candid in scraping data from the service…</p>
<p>We’re going to extract the shapefiles for all colleges in the university and store the data in ESRI shapefiles.</p>
<p>We need to load the following libraries at the top of our <code>data-raw/obtain-oxpoints-data.R</code> script:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"jsonlite"</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"tidyverse"</span>)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"sf"</span>)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"here"</span>)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"rvest"</span>)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"mapview"</span>)</span></code></pre></div>
</div>
<p>There’s not a fantastically well documented way to obtain college data from the API. After jigging about with the search fields the query below returns everything we need, and then we then subset the data (after much trial and error):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">raw_json_oxpoints_colleges <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_json</span>(<span class="st" style="color: #20794D;">"https://maps.ox.ac.uk/api/places/search?type=%2Funiversity%2Fcollege&amp;inoxford=true&amp;-type_exact=%5C%2Funiversity%5C%2Fsub-library&amp;-type_exact=%5C%2Funiversity%5C%2Froom&amp;count=50&amp;facet=type_exact"</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3">oxpoints_colleges <span class="ot" style="color: #003B4F;">&lt;-</span> raw_json_oxpoints_colleges<span class="sc" style="color: #5E5E5E;">$</span><span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">_embedded</span><span class="st" style="color: #20794D;">`</span><span class="sc" style="color: #5E5E5E;">$</span>pois</span></code></pre></div>
</div>
<p>The <code>oxpoints_colleges</code> object contains data for all 38 colleges (at the time of writing). We’re going to iteratively extract the college data through this <code>get_college_data()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">get_college_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(oxpoints_data,</span>
<span id="cb3-2">                             college_index) {</span>
<span id="cb3-3">  college_properties <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">names</span>(oxpoints_data[[college_index]])</span>
<span id="cb3-4"></span>
<span id="cb3-5">  extracted_properties <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb3-6">    college_properties[college_properties <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb3-7">      <span class="st" style="color: #20794D;">"id"</span>,</span>
<span id="cb3-8">      <span class="st" style="color: #20794D;">"lat"</span>,</span>
<span id="cb3-9">      <span class="st" style="color: #20794D;">"lon"</span>,</span>
<span id="cb3-10">      <span class="st" style="color: #20794D;">"name"</span>,</span>
<span id="cb3-11">      <span class="st" style="color: #20794D;">"name_sort"</span>,</span>
<span id="cb3-12">      <span class="st" style="color: #20794D;">"shape"</span>,</span>
<span id="cb3-13">      <span class="st" style="color: #20794D;">"social_facebook"</span>,</span>
<span id="cb3-14">      <span class="st" style="color: #20794D;">"website"</span></span>
<span id="cb3-15">    )]</span>
<span id="cb3-16"></span>
<span id="cb3-17">  oxpoints_data[[college_index]] <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-18">    .[extracted_properties] <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-19">    <span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-20">    <span class="fu" style="color: #4758AB;">mutate_if</span>(is.list, <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">as.character</span>(.))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-21">    <span class="fu" style="color: #4758AB;">mutate_all</span>(<span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">parse_guess</span>(.)))</span>
<span id="cb3-22">}</span></code></pre></div>
</div>
<p>Let’s extract the first college to create an object we can iteratively fill:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">college_oxpoints_data <span class="ot" style="color: #003B4F;">&lt;-</span> oxpoints_colleges <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">get_college_data</span>(<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
</div>
<p>Now we can use <code>pwalk</code> to iterate over all other colleges:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">38</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">pwalk</span>(<span class="cf" style="color: #003B4F;">function</span>(x){college_oxpoints_data <span class="ot" style="color: #003B4F;">&lt;&lt;-</span> college_oxpoints_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-3">    <span class="fu" style="color: #4758AB;">bind_rows</span>(<span class="fu" style="color: #4758AB;">get_college_data</span>(oxpoints_colleges, x))})</span></code></pre></div>
</div>
<p>Our <code>college_oxpoints_data</code> object contains the geometry of each college in the <code>shape</code> column and two columns <code>lat</code> and <code>long</code> of unknown provenance - let’s drop those as well as <code>name_sort</code> and <code>id</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">college_oxpoints_data <span class="ot" style="color: #003B4F;">&lt;-</span> college_oxpoints_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>lat, <span class="sc" style="color: #5E5E5E;">-</span>lon, <span class="sc" style="color: #5E5E5E;">-</span>id, <span class="sc" style="color: #5E5E5E;">-</span>name_sort)</span></code></pre></div>
</div>
<div class="cell">

</div>
<p>Let’s augment this data with whatever we can easily collect from the Wikipedia page on the Oxford Colleges.</p>
</div>
</div>
</div>
<div id="accordion" class="panel-group">
<div class="panel panel-default">
<div class="panel-heading">
<h4 class="panel-title anchored">
 Extract data from Wikipedia table 
</h4>
</div>
<div id="wiki-table" class="panel-collapse collapse">
<div class="panel-body">
<p>The <a href="https://en.wikipedia.org/wiki/Colleges_of_the_University_of_Oxford">Colleges of the University of Oxford Wikipedia page</a> provides a useful summary of the colleges, including; year of foundation, financial assets and number of students. We’ve already loaded the <code>rvest</code> package at the top of our script file, which is the go-to tool for web scraping with R. First, let’s import the web page using <code>read_html</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">colleges_of_oxford <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_html</span>(<span class="st" style="color: #20794D;">"https://en.wikipedia.org/wiki/Colleges_of_the_University_of_Oxford"</span>)</span></code></pre></div>
</div>
<p>We want to extract the tables from the web page, which we achieve using <code>html_nodes()</code>. Specifically, we only care about the 3rd table.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">colleges_of_oxford <span class="ot" style="color: #003B4F;">&lt;-</span> colleges_of_oxford <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">html_nodes</span>(<span class="st" style="color: #20794D;">"table"</span>)</span>
<span id="cb8-3">colleges_of_oxford <span class="ot" style="color: #003B4F;">&lt;-</span> colleges_of_oxford[[<span class="dv" style="color: #AD0000;">3</span>]]</span></code></pre></div>
</div>
<p>The <code>rvest</code> package does contain a useful function (<code>html_table()</code>) for parsing well-formed tables into tibbles. Unfortunately, our table is not very well formed at all. The first row spans the whole table and contains a glossary for abbreviations in the table, please don’t format your own tables like this. I’ve decided to get around this by extracting all rows from the table, which have the html tag <code>&lt;tr&gt;</code> and extract the contents of these nodes into character vectors using <code>html_text()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">colleges_of_oxford <span class="ot" style="color: #003B4F;">&lt;-</span> colleges_of_oxford <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">html_nodes</span>(<span class="st" style="color: #20794D;">"tbody"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;">html_nodes</span>(<span class="st" style="color: #20794D;">"tr"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;">html_text</span>()</span></code></pre></div>
</div>
<p>We’ll throw away the top row by asking for parts <code>2:length(.)</code> and also clean up and nasty trailing/leading white space with <code>str_trim()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">colleges_of_oxford <span class="ot" style="color: #003B4F;">&lt;-</span> colleges_of_oxford <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb10-2">  .[<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">length</span>(.)] <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;">str_trim</span>() </span></code></pre></div>
</div>
<p>Now we can convert our vector of characters into a <code>tibble</code>! In the original table, the <a href="https://en.wikipedia.org/wiki/Newline">newline character <code>\n</code></a> separates pieces of data in each row. So we can use <code>str_replace_all</code> to replace any sequence of repeating <code>\n</code> with a <code>;</code> and then parse this as a table with <code>read_delim()</code>. Let’s also tidy up the column names before we forget.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">colleges_of_oxford <span class="ot" style="color: #003B4F;">&lt;-</span> colleges_of_oxford <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">str_replace_all</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">{1,}"</span>, <span class="st" style="color: #20794D;">";"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">text =</span> .) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;">separate</span>(text,</span>
<span id="cb11-5">           <span class="at" style="color: #657422;">into =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name"</span>, <span class="st" style="color: #20794D;">"foundation.year"</span>, <span class="st" style="color: #20794D;">"sister.college"</span>, <span class="st" style="color: #20794D;">"total.assets"</span>, <span class="st" style="color: #20794D;">"financial.endowment"</span>, <span class="st" style="color: #20794D;">"undergraduates"</span>, <span class="st" style="color: #20794D;">"post.graduates"</span>, <span class="st" style="color: #20794D;">"visiting.students"</span>, <span class="st" style="color: #20794D;">"male.students"</span>, <span class="st" style="color: #20794D;">"female.students"</span>, <span class="st" style="color: #20794D;">"total.students"</span>, <span class="st" style="color: #20794D;">"assets.per.student"</span>),</span>
<span id="cb11-6">           <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">";"</span>)</span></code></pre></div>
</div>
<p>There are several messy columns that we need to convert into numeric data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">colleges_of_oxford <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">slice</span>(<span class="dv" style="color: #AD0000;">8</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">9</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;">select</span>(name, foundation.year, total.assets, financial.endowment)</span></code></pre></div>
</div>
<p>Turns out <code>readr::parse_number()</code> is clever enough to fix our column. It’s convenient to use <code>mutate_at</code> to modify many columns at once, having previously re-arranged columns so all the targets are together:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">colleges_of_oxford <span class="ot" style="color: #003B4F;">&lt;-</span> colleges_of_oxford <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">select</span>(name, sister.college, <span class="fu" style="color: #4758AB;">everything</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(foundation.year<span class="sc" style="color: #5E5E5E;">:</span>undergraduates), <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb13-4">    <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">class</span>(.x) <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"numeric"</span>) {</span>
<span id="cb13-5">      .x</span>
<span id="cb13-6">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb13-7">      <span class="fu" style="color: #4758AB;">parse_number</span>(.x)</span>
<span id="cb13-8">    }</span>
<span id="cb13-9">  ))</span></code></pre></div>
</div>
<p>We’ve now got all of the information I wanted about the colleges, so let’s combine the tables with <code>left_join()</code>. But this isn’t a well formatted dataset for GIS analysis/visualisation. For that we need to use the <code>sf</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">college_data <span class="ot" style="color: #003B4F;">&lt;-</span> college_oxpoints_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;">left_join</span>(colleges_of_oxford)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="panel panel-default">
<div class="panel-heading">
<h4 class="panel-title anchored">
 Creating an <code>sf</code> object 
</h4>
</div>
<div id="sf-object" class="panel-collapse collapse">
<div class="panel-body">
<p><code>sf tibbles</code> are the augmented tibbles of the excellent <code>sf</code> package. They contain both the necessary geometric data for computing &amp; visualising GIS features, and additional non-geometric data about each feature (i.e.&nbsp;the founding year of the college).</p>
<p>Let’s remove the <code>shape</code> column from <code>college_data</code> to provide us with the purely non-geometric data columns, and we’ll append the</p>
<p>Let’s extract all the non-geometric data columns from <code>college_data</code> with <code>select()</code> and create a new tibble <code>college_nongeometric_data</code> that we’ll append the geometric data to below.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">college_nongeometric_data <span class="ot" style="color: #003B4F;">&lt;-</span> college_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>shape)</span></code></pre></div>
</div>
<p>In my opinion, this is the one and only fiddly part of using <code>sf</code>. We need to create an <code>sfc</code> object, which is achieved with the <code>st_as_sfc()</code> function. However, this function needs a <em>vector</em> of the features and not a <code>tibble</code>; which is why in the code below we use <code>.[[1]]</code>. If you’re unfamiliar with this trick, please refer to <a href="https://twitter.com/hadleywickham/status/643381054758363136">Hadley Wickham’s pepper shaker tutorial</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">college_features <span class="ot" style="color: #003B4F;">&lt;-</span> college_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;">select</span>(shape) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb16-3">  .[[<span class="dv" style="color: #AD0000;">1</span>]]</span>
<span id="cb16-4">college_geometries <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">st_as_sfc</span>(college_features)</span></code></pre></div>
</div>
<p>We can now augment <code>college_nongeometric_data</code> with this <code>sfc</code> object via the <code>st_geometry()</code> function. Finally, we’ll create a copy of this with a sensible name: <code>college_shapes</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;">st_geometry</span>(college_nongeometric_data) <span class="ot" style="color: #003B4F;">&lt;-</span> college_geometries</span>
<span id="cb17-2">college_shapes <span class="ot" style="color: #003B4F;">&lt;-</span> college_nongeometric_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">where</span>(is.list))</span></code></pre></div>
</div>
<p>Our <code>sf tibble</code> currently suffers from two issues:</p>
<ul>
<li>There’s no projection. We’ll assign the standard WGS84 projection with <code>st_set_crs</code>.</li>
<li>The geometry objects are currently <code>POLYGON Z</code> and <code>MULTIPOLYGON Z</code> with zero values for <code>z</code>. As all values are zero, they’re pointless and can be removed with <code>st_zm</code>.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">college_shapes <span class="ot" style="color: #003B4F;">&lt;-</span> college_shapes <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;">st_set_crs</span>(<span class="dv" style="color: #AD0000;">4326</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;">st_zm</span>()</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="panel panel-default">
<div class="panel-heading">
<h4 class="panel-title anchored">
 Understanding our shapefiles with <code>mapview</code> 
</h4>
</div>
<div id="visualise-with-leaflet" class="panel-collapse collapse">
<div class="panel-body">
<p>Before continuing forwards, we should ensure our shapefiles are what we assume they are: the grounds of each college in the University of Oxford. The <code>mapview</code> package is incredibly useful for exploring and understanding <code>sf tibbles</code>. If you’ve been following along precisely, the script file your in already loads <code>mpaview</code>!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">mp_colleges <span class="ot" style="color: #003B4F;">&lt;-</span> college_shapes <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;">mapview</span>()</span>
<span id="cb19-3">mp_colleges</span></code></pre></div>
</div>
<p>How does this help us? Well, we can see that the colleges of the University are mostly clustered together around the city centre and there are some outliers like Wolfson College. If you clicked around a little, you’d also notice that some colleges have multiple sites (they’re MULTIPOLYGONS in the data).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">college_shapes <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">where</span>(is.list)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;">slice</span>(<span class="fu" style="color: #4758AB;">which</span>(<span class="fu" style="color: #4758AB;">st_geometry_type</span>(college_shapes) <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"MULTIPOLYGON"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb20-4">  <span class="fu" style="color: #4758AB;">mapview</span>(<span class="at" style="color: #657422;">zcol =</span> <span class="st" style="color: #20794D;">"name"</span>, <span class="at" style="color: #657422;">alpha.regions =</span> <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
</div>
<p>Fortunately, for all five of these colleges the largest polygon is the actual college and all other polygons can be considered superfluous to the calculation of where the centre of Oxford is. So how do we go about extracting the largest polygon from MULTIPOLYGON items?</p>
<p>Edzer Pebesma is the creator of <code>sf</code> and was kind enough to advise me <a href="https://twitter.com/edzerpebesma/status/1080835401756147712">on Twitter</a> that there’s an unexported function <code>largest_ring</code> that returns the largest polygon. Let’s re-do our data cleaning from above, but add three steps:</p>
<ul>
<li>Use <code>st_zm()</code> and <code>st_set_crs()</code> to remove the Z coordinates and set the projection of the data</li>
<li>Use <code>st_cast()</code> to convert all POLYGONs to MULTIPOLYGONs</li>
<li>Extract the largest polygon with <code>largest_ring()</code></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">college_features <span class="ot" style="color: #003B4F;">&lt;-</span> college_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;">select</span>(shape) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb21-3">  .[[<span class="dv" style="color: #AD0000;">1</span>]]</span>
<span id="cb21-4">college_geometries <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">st_as_sfc</span>(college_features) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb21-5">  <span class="fu" style="color: #4758AB;">st_zm</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb21-6">  <span class="fu" style="color: #4758AB;">st_set_crs</span>(<span class="dv" style="color: #AD0000;">4326</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb21-7">  <span class="fu" style="color: #4758AB;">st_cast</span>(<span class="st" style="color: #20794D;">"MULTIPOLYGON"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb21-8">  sf<span class="sc" style="color: #5E5E5E;">:::</span><span class="fu" style="color: #4758AB;">largest_ring</span>()</span>
<span id="cb21-9"></span>
<span id="cb21-10"><span class="fu" style="color: #4758AB;">st_geometry</span>(college_nongeometric_data) <span class="ot" style="color: #003B4F;">&lt;-</span> college_geometries</span>
<span id="cb21-11">college_shapes <span class="ot" style="color: #003B4F;">&lt;-</span> college_nongeometric_data</span></code></pre></div>
</div>
<p>Now let’s check out the colleges from before which had multiple sites, looks like we’ve been successful!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">college_shapes <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;">filter</span>(name <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Corpus Christi College"</span>, <span class="st" style="color: #20794D;">"Exeter College"</span>, <span class="st" style="color: #20794D;">"Magdalen College"</span>, <span class="st" style="color: #20794D;">"Merton College"</span>, <span class="st" style="color: #20794D;">"Pembroke College"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;">mapview</span>(<span class="at" style="color: #657422;">zcol =</span> <span class="st" style="color: #20794D;">"name"</span>)</span></code></pre></div>
</div>
<p>It makes sense to export this now nicely formatted GIS data for use in the actual visualisation scripts. GeoJSON is my preferred GIS data format, and we can create that directly using <code>write_sf()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">college_shapes <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;">write_sf</span>(<span class="fu" style="color: #4758AB;">here</span>(<span class="st" style="color: #20794D;">"posts"</span>, <span class="st" style="color: #20794D;">"2019-02-18_oxford-centres"</span>, <span class="st" style="color: #20794D;">"shapefiles_oxford_colleges.json"</span>),</span>
<span id="cb23-3">           <span class="at" style="color: #657422;">driver =</span> <span class="st" style="color: #20794D;">"GeoJSON"</span>)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="panel panel-default">
<div class="panel-heading">
<h4 class="panel-title anchored">
 Visualising college shapefiles with <code>ggmap</code> 
</h4>
</div>
<div id="visualise-with-ggmap" class="panel-collapse collapse">
<div class="panel-body">
<p><code>ggmap</code> is the best tool for obtaining static map tiles for inclusion in <code>ggplot2</code> charts, most folks prefer the Google Maps tiles. Unfortunately, since July 2018 users need to provide Google with billing details in order to obtain map tiles. Read my <a href="https://www.visibledata.co.uk/blog/2018/12/05/2018-12-05-using-ggmap-after-july-2018/">blogpost on how to setup your Google Maps API Key</a> before running the code below.</p>
<p>At the time of writing (January 2018), the version of <code>ggmap</code> on CRAN doesn’t support the new API changes. Run <code>packageVersion("ggmap")</code> in your console, if the version is higher than 2.7 then you’re in luck! If not, you need to install the development version of the package as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">devtools<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_github</span>(<span class="st" style="color: #20794D;">"dkahle/ggmap"</span>, <span class="at" style="color: #657422;">ref =</span> <span class="st" style="color: #20794D;">"tidyup"</span>)</span></code></pre></div>
</div>
<p>Let’s create a new script file for visualising the college shapes, <code>oxford-college-shapes.R</code>. We’ll need to load the following packages at the top of the script</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"tidyverse"</span>)</span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"here"</span>)</span>
<span id="cb25-3"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"ggmap"</span>)</span>
<span id="cb25-4"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"sf"</span>)</span>
<span id="cb25-5"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"glue"</span>)</span>
<span id="cb25-6"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"ggrepel"</span>)</span></code></pre></div>
</div>
<p>Our GIS data was exported in the previous section, let’s import it ready for use in this script:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">college_shapes <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_sf</span>(<span class="fu" style="color: #4758AB;">here</span>(<span class="st" style="color: #20794D;">"posts"</span>, <span class="st" style="color: #20794D;">"2019-02-18_oxford-centres"</span>, <span class="st" style="color: #20794D;">"shapefiles_oxford_colleges.json"</span>))</span></code></pre></div>
</div>
<p>Before creating our maps we need to register our Google Maps token using <code>register_google()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;">register_google</span>(<span class="at" style="color: #657422;">key =</span> <span class="st" style="color: #20794D;">"My-FAKE-KEY"</span>)</span></code></pre></div>
</div>
<div class="cell">

</div>
<p><code>get_googlemap()</code> gets us a map from the Google Maps API but requires both a center and (integer) zoom level, I’ve fiddled around for a while and think the following work well for us.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">base_map <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_googlemap</span>(<span class="at" style="color: #657422;">center =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1.257411</span>, <span class="fl" style="color: #AD0000;">51.7601055</span>), </span>
<span id="cb28-2">                          <span class="at" style="color: #657422;">maptype =</span> <span class="st" style="color: #20794D;">"roadmap"</span>,</span>
<span id="cb28-3">                          <span class="at" style="color: #657422;">zoom =</span> <span class="dv" style="color: #AD0000;">14</span>)</span></code></pre></div>
</div>
<p>In order to create <code>ggplot2</code> charts containing map tiles from <code>ggmap</code> we need to start with the <code>ggmap()</code> function and add layers with <code>+</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">gg_oxford_city <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggmap</span>(base_map)</span>
<span id="cb29-2">gg_oxford_city <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;">geom_sf</span>(<span class="at" style="color: #657422;">data =</span> college_shapes, <span class="at" style="color: #657422;">inherit.aes =</span> <span class="cn" style="color: #8f5902;">FALSE</span>, <span class="at" style="color: #657422;">alpha =</span> <span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</div>
<p>This is too busy a map to really communicate anything, it would be great if we could remove some of the labels and landmarks from the base map. To do that, we need to use the <code>style</code> argument of <code>ggmap()</code>.</p>
<p>The <a href="https://developers.google.com/maps/documentation/javascript/examples/hiding-features">Google Maps JavaScript API</a> doesn’t make it easy to figure out how to manipulate multiple styles at once. <a href="https://developers.google.com/maps/documentation/maps-static/styling">This page</a> advises, “do not combine multiple operations into a single style operation”. What’s that mean?!</p>
<ul>
<li>If modifying just <em>one</em> style, we can give the <code>style</code> argument a vector</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;">get_googlemap</span>(<span class="at" style="color: #657422;">center =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1.257411</span>, <span class="fl" style="color: #AD0000;">51.7601055</span>), </span>
<span id="cb30-2">                          <span class="at" style="color: #657422;">maptype =</span> <span class="st" style="color: #20794D;">"roadmap"</span>,</span>
<span id="cb30-3">                          <span class="at" style="color: #657422;">zoom =</span> <span class="dv" style="color: #AD0000;">14</span>,</span>
<span id="cb30-4">              <span class="at" style="color: #657422;">style =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="at" style="color: #657422;">feature =</span> <span class="st" style="color: #20794D;">"feature:poi.park"</span>, <span class="at" style="color: #657422;">visiblity =</span> <span class="st" style="color: #20794D;">"off"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-5">  <span class="fu" style="color: #4758AB;">ggmap</span>()</span></code></pre></div>
</div>
<ul>
<li>If modifying more than one style, we need to give a string containing multiple styles</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;">get_googlemap</span>(<span class="at" style="color: #657422;">center =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1.257411</span>, <span class="fl" style="color: #AD0000;">51.7601055</span>), </span>
<span id="cb31-2">                          <span class="at" style="color: #657422;">maptype =</span> <span class="st" style="color: #20794D;">"roadmap"</span>,</span>
<span id="cb31-3">                          <span class="at" style="color: #657422;">zoom =</span> <span class="dv" style="color: #AD0000;">14</span>,</span>
<span id="cb31-4">              <span class="at" style="color: #657422;">style =</span> <span class="st" style="color: #20794D;">"&amp;style=feature:poi|visibility:off&amp;style=feature:poi.park|visibility:on&amp;style=feature:landscape.man_made|visibility:off"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb31-5">  <span class="fu" style="color: #4758AB;">ggmap</span>()</span></code></pre></div>
</div>
<p>Let’s create a utility function for creating these style strings.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">make_ggmap_styles <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(styles){</span>
<span id="cb32-2">  styles <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb32-3">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">style =</span> <span class="fu" style="color: #4758AB;">glue</span>(<span class="st" style="color: #20794D;">"&amp;style=feature:{feature}|visibility:{visibility}"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb32-4">    <span class="fu" style="color: #4758AB;">select</span>(style) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb32-5">    .[[<span class="dv" style="color: #AD0000;">1</span>]] <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb32-6">    <span class="fu" style="color: #4758AB;">paste0</span>(<span class="at" style="color: #657422;">collapse =</span> <span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb32-7">}</span></code></pre></div>
</div>
<p>Here are the things we’d like to show/hide:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">my_styles <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tribble</span>(</span>
<span id="cb33-2">  <span class="sc" style="color: #5E5E5E;">~</span>feature, <span class="sc" style="color: #5E5E5E;">~</span>visibility,</span>
<span id="cb33-3">  <span class="st" style="color: #20794D;">"poi"</span>, <span class="st" style="color: #20794D;">"off"</span>,</span>
<span id="cb33-4">  <span class="st" style="color: #20794D;">"poi.park"</span>, <span class="st" style="color: #20794D;">"on"</span>,</span>
<span id="cb33-5">  <span class="st" style="color: #20794D;">"landscape.man_made"</span>, <span class="st" style="color: #20794D;">"off"</span></span>
<span id="cb33-6">) </span></code></pre></div>
</div>
<p>Now we have a good looking <code>gg_oxford_city</code> that we can play with:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">base_map <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_googlemap</span>(<span class="at" style="color: #657422;">center =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1.257411</span>, <span class="fl" style="color: #AD0000;">51.7601055</span>), </span>
<span id="cb34-2">                          <span class="at" style="color: #657422;">maptype =</span> <span class="st" style="color: #20794D;">"roadmap"</span>,</span>
<span id="cb34-3">                          <span class="at" style="color: #657422;">zoom =</span> <span class="dv" style="color: #AD0000;">14</span>,</span>
<span id="cb34-4">                          <span class="at" style="color: #657422;">style =</span> my_styles <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb34-5">                            <span class="fu" style="color: #4758AB;">make_ggmap_styles</span>())</span>
<span id="cb34-6">gg_oxford_city <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggmap</span>(base_map)</span>
<span id="cb34-7">gg_oxford_city</span></code></pre></div>
</div>
<p>It’s really incredibly how flexible the <code>ggplot2</code> extensions system is, we can label <code>sf</code> objects using <code>ggrepel::goem_label_repel</code> with barely any effort. The only effort I did expend was on choosing a good value for <code>nudge_x</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">gg_oxford_city <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb35-2">  <span class="fu" style="color: #4758AB;">geom_sf</span>(<span class="at" style="color: #657422;">data =</span> college_shapes, <span class="at" style="color: #657422;">inherit.aes =</span> <span class="cn" style="color: #8f5902;">FALSE</span>,</span>
<span id="cb35-3">          <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill =</span> foundation.year <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">1300</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb35-4">  <span class="fu" style="color: #4758AB;">geom_label_repel</span>(</span>
<span id="cb35-5">    <span class="at" style="color: #657422;">data =</span> college_shapes <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb35-6">                  <span class="fu" style="color: #4758AB;">filter</span>(foundation.year <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">1300</span>),</span>
<span id="cb35-7">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> name, <span class="at" style="color: #657422;">geometry =</span> geometry),</span>
<span id="cb35-8">    <span class="at" style="color: #657422;">stat =</span> <span class="st" style="color: #20794D;">"sf_coordinates"</span>,</span>
<span id="cb35-9">    <span class="at" style="color: #657422;">nudge_x =</span> <span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb35-10">    <span class="at" style="color: #657422;">inherit.aes =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb35-11">  )</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="panel panel-default">
<div class="panel-heading">
<h4 class="panel-title anchored">
 Animating the centre of mass over time 
</h4>
</div>
<div id="center-of-mass-overtime" class="panel-collapse collapse">
<div class="panel-body">
<p>Now we’ve finally got to the point that we can compute the centre of the colleges over time! Let’s create a new script file <code>college-centres-over-time.R</code> and load our libraries.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"tidyverse"</span>)</span>
<span id="cb36-2"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"ggmap"</span>)</span>
<span id="cb36-3"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"sf"</span>)</span>
<span id="cb36-4"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"glue"</span>)</span>
<span id="cb36-5"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"ggrepel"</span>)</span></code></pre></div>
</div>
<p>Again, we need to import our GIS data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">college_shapes <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_sf</span>(<span class="fu" style="color: #4758AB;">here</span>(<span class="st" style="color: #20794D;">"data-raw"</span>, <span class="st" style="color: #20794D;">"shapefiles_oxford_colleges.json"</span>))</span></code></pre></div>
</div>
<p>We also need to ensure that we register with the Google Maps API when running this script and set-up our base map again.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;">register_google</span>(<span class="at" style="color: #657422;">key =</span> <span class="st" style="color: #20794D;">"My-FAKE-KEY"</span>)</span>
<span id="cb38-2">make_ggmap_styles <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(styles){</span>
<span id="cb38-3">  styles <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb38-4">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">style =</span> <span class="fu" style="color: #4758AB;">glue</span>(<span class="st" style="color: #20794D;">"&amp;style=feature:{feature}|visibility:{visibility}"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb38-5">    <span class="fu" style="color: #4758AB;">select</span>(style) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb38-6">    .[[<span class="dv" style="color: #AD0000;">1</span>]] <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb38-7">    <span class="fu" style="color: #4758AB;">paste0</span>(<span class="at" style="color: #657422;">collapse =</span> <span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb38-8">}</span>
<span id="cb38-9">my_styles <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tribble</span>(</span>
<span id="cb38-10">  <span class="sc" style="color: #5E5E5E;">~</span>feature, <span class="sc" style="color: #5E5E5E;">~</span>visibility,</span>
<span id="cb38-11">  <span class="st" style="color: #20794D;">"poi"</span>, <span class="st" style="color: #20794D;">"off"</span>,</span>
<span id="cb38-12">  <span class="st" style="color: #20794D;">"poi.park"</span>, <span class="st" style="color: #20794D;">"on"</span>,</span>
<span id="cb38-13">  <span class="st" style="color: #20794D;">"landscape.man_made"</span>, <span class="st" style="color: #20794D;">"off"</span></span>
<span id="cb38-14">)</span>
<span id="cb38-15">base_map <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_googlemap</span>(<span class="at" style="color: #657422;">center =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1.257411</span>, <span class="fl" style="color: #AD0000;">51.7601055</span>), </span>
<span id="cb38-16">                          <span class="at" style="color: #657422;">maptype =</span> <span class="st" style="color: #20794D;">"roadmap"</span>,</span>
<span id="cb38-17">                          <span class="at" style="color: #657422;">zoom =</span> <span class="dv" style="color: #AD0000;">14</span>,</span>
<span id="cb38-18">                          <span class="at" style="color: #657422;">style =</span> my_styles <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb38-19">                            <span class="fu" style="color: #4758AB;">make_ggmap_styles</span>())</span>
<span id="cb38-20">gg_oxford_city <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggmap</span>(base_map)</span></code></pre></div>
</div>
<p>Let’s see how the centre of mass of the colleges changes each century. I’ve created <code>century_cut()</code> which wraps <code>cut()</code> to create prettified centuries.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">century_cut <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, <span class="at" style="color: #657422;">lower =</span> <span class="dv" style="color: #AD0000;">0</span>, upper, <span class="at" style="color: #657422;">by =</span> <span class="dv" style="color: #AD0000;">100</span>,</span>
<span id="cb39-2">                   <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"-"</span>, <span class="at" style="color: #657422;">above.char =</span> <span class="st" style="color: #20794D;">"+"</span>) {</span>
<span id="cb39-3"></span>
<span id="cb39-4"> labs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="fu" style="color: #4758AB;">seq</span>(lower, upper <span class="sc" style="color: #5E5E5E;">-</span> by, <span class="at" style="color: #657422;">by =</span> by),</span>
<span id="cb39-5">                 <span class="fu" style="color: #4758AB;">seq</span>(lower <span class="sc" style="color: #5E5E5E;">+</span> by <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>, upper <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">by =</span> by),</span>
<span id="cb39-6">                 <span class="at" style="color: #657422;">sep =</span> sep),</span>
<span id="cb39-7">           <span class="fu" style="color: #4758AB;">paste</span>(upper, above.char, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">""</span>))</span>
<span id="cb39-8"></span>
<span id="cb39-9"> <span class="fu" style="color: #4758AB;">cut</span>(<span class="fu" style="color: #4758AB;">floor</span>(x), <span class="at" style="color: #657422;">breaks =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">seq</span>(lower, upper, <span class="at" style="color: #657422;">by =</span> by), <span class="cn" style="color: #8f5902;">Inf</span>),</span>
<span id="cb39-10">     <span class="at" style="color: #657422;">right =</span> <span class="cn" style="color: #8f5902;">FALSE</span>, <span class="at" style="color: #657422;">labels =</span> labs)</span>
<span id="cb39-11">}</span>
<span id="cb39-12"></span>
<span id="cb39-13"></span>
<span id="cb39-14">colleges_by_century <span class="ot" style="color: #003B4F;">&lt;-</span> college_shapes <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb39-15">  <span class="fu" style="color: #4758AB;">group_by</span>(<span class="at" style="color: #657422;">century =</span> <span class="fu" style="color: #4758AB;">century_cut</span>(foundation.year, <span class="at" style="color: #657422;">lower =</span> <span class="dv" style="color: #AD0000;">1200</span>, <span class="at" style="color: #657422;">upper =</span> <span class="dv" style="color: #AD0000;">2100</span>, <span class="at" style="color: #657422;">by =</span> <span class="dv" style="color: #AD0000;">100</span>))</span>
<span id="cb39-16"></span>
<span id="cb39-17"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Messy code to display just the name and century of creation</span></span>
<span id="cb39-18">display_colleges_by_century <span class="ot" style="color: #003B4F;">&lt;-</span> colleges_by_century <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb39-19">  <span class="fu" style="color: #4758AB;">select</span>(name, century)</span>
<span id="cb39-20"><span class="fu" style="color: #4758AB;">st_geometry</span>(display_colleges_by_century) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb39-21">display_colleges_by_century <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb39-22">  <span class="fu" style="color: #4758AB;">arrange</span>(century)</span></code></pre></div>
</div>
<p>Now we’ve done this we can calculate the centres for each century:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">century_centres <span class="ot" style="color: #003B4F;">&lt;-</span> colleges_by_century <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb40-2">  <span class="fu" style="color: #4758AB;">select</span>(century) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb40-3">  <span class="fu" style="color: #4758AB;">summarise_all</span>(first) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb40-4">  <span class="fu" style="color: #4758AB;">st_centroid</span>()</span>
<span id="cb40-5"></span>
<span id="cb40-6">gg_century_centres <span class="ot" style="color: #003B4F;">&lt;-</span> gg_oxford_city <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb40-7">  <span class="fu" style="color: #4758AB;">geom_sf</span>(<span class="at" style="color: #657422;">data =</span> colleges_by_century,</span>
<span id="cb40-8">          <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill =</span> century), <span class="at" style="color: #657422;">inherit.aes =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb40-9">  <span class="fu" style="color: #4758AB;">geom_sf</span>(<span class="at" style="color: #657422;">data =</span> century_centres,</span>
<span id="cb40-10">          <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill =</span> century,</span>
<span id="cb40-11">              <span class="at" style="color: #657422;">color =</span> century), <span class="at" style="color: #657422;">inherit.aes =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb40-12">  <span class="fu" style="color: #4758AB;">geom_label_repel</span>(</span>
<span id="cb40-13">    <span class="at" style="color: #657422;">data =</span> century_centres,</span>
<span id="cb40-14">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> century, <span class="at" style="color: #657422;">fill =</span> century, <span class="at" style="color: #657422;">geometry =</span> geometry),</span>
<span id="cb40-15">    <span class="at" style="color: #657422;">stat =</span> <span class="st" style="color: #20794D;">"sf_coordinates"</span>,</span>
<span id="cb40-16">    <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"white"</span>,</span>
<span id="cb40-17">    <span class="at" style="color: #657422;">nudge_x =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb40-18">    <span class="at" style="color: #657422;">inherit.aes =</span> <span class="cn" style="color: #8f5902;">FALSE</span>,</span>
<span id="cb40-19">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb40-20">    <span class="at" style="color: #657422;">fontface =</span> <span class="st" style="color: #20794D;">'bold'</span></span>
<span id="cb40-21">  )</span>
<span id="cb40-22">gg_century_centres <span class="ot" style="color: #003B4F;">&lt;-</span> gg_century_centres <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb40-23">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Centre of Oxford colleges established in each century"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb40-24">  <span class="fu" style="color: #4758AB;">scale_fill_viridis_d</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb40-25">  <span class="fu" style="color: #4758AB;">scale_color_viridis_d</span>()</span>
<span id="cb40-26">gg_century_centres</span></code></pre></div>
</div>
<p><img src="https://visibledata.co.uk/blog/2019-02-18-oxford-centres_files/gg_century_centres.png" class="img-fluid" style="width:100.0%"></p>
<div class="cell">

</div>
<p>Now we’ve established the centre of the colleges for each century, let’s compute the cumulative centres as time progresses. For simplicity, let’s throw away all of the data except for the longitude and latitude of the centre of mass in each century. The <code>centre_over_time_period()</code> function returns the centre of mass for all colleges established within the specific time period:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">centre_over_time_period <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(shapes, lower, upper){</span>
<span id="cb41-2">  <span class="co" style="color: #5E5E5E;"># print("a")</span></span>
<span id="cb41-3">  <span class="fu" style="color: #4758AB;">suppressWarnings</span>(shapes <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb41-4">  <span class="fu" style="color: #4758AB;">filter</span>(foundation.year <span class="sc" style="color: #5E5E5E;">&gt;=</span> lower <span class="sc" style="color: #5E5E5E;">&amp;</span> foundation.year <span class="sc" style="color: #5E5E5E;">&lt;</span> upper) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb41-5">  <span class="fu" style="color: #4758AB;">st_centroid</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb41-6">  <span class="fu" style="color: #4758AB;">st_combine</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb41-7">  <span class="fu" style="color: #4758AB;">st_centroid</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb41-8">  <span class="fu" style="color: #4758AB;">st_coordinates</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb41-9">  <span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb41-10">  <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">long =</span> X,</span>
<span id="cb41-11">           <span class="at" style="color: #657422;">lat =</span> Y))</span>
<span id="cb41-12">}</span>
<span id="cb41-13"></span>
<span id="cb41-14"><span class="fu" style="color: #4758AB;">centre_over_time_period</span>(college_shapes,</span>
<span id="cb41-15">                        <span class="at" style="color: #657422;">lower =</span> <span class="dv" style="color: #AD0000;">1500</span>,</span>
<span id="cb41-16">                        <span class="at" style="color: #657422;">upper =</span> <span class="dv" style="color: #AD0000;">1600</span>)</span></code></pre></div>
</div>
<p>Using <code>pmap()</code> we can calculate the cumulative college centres:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">time_periods <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb42-2">  <span class="at" style="color: #657422;">lower =</span> <span class="dv" style="color: #AD0000;">1200</span>,</span>
<span id="cb42-3">  <span class="at" style="color: #657422;">upper =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">1300</span>, <span class="dv" style="color: #AD0000;">2100</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb42-4">)</span>
<span id="cb42-5"></span>
<span id="cb42-6">centres_through_history <span class="ot" style="color: #003B4F;">&lt;-</span> time_periods <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb42-7">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">centre =</span> <span class="fu" style="color: #4758AB;">pmap</span>(<span class="fu" style="color: #4758AB;">list</span>(lower, upper), <span class="cf" style="color: #003B4F;">function</span>(lower, upper) {</span>
<span id="cb42-8">  <span class="fu" style="color: #4758AB;">centre_over_time_period</span>(college_shapes,</span>
<span id="cb42-9">  lower,</span>
<span id="cb42-10">  upper)</span>
<span id="cb42-11">  })) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb42-12">  <span class="fu" style="color: #4758AB;">unnest</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb42-13">  <span class="fu" style="color: #4758AB;">st_as_sf</span>(<span class="at" style="color: #657422;">coords =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"long"</span>, <span class="st" style="color: #20794D;">"lat"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb42-14">  <span class="fu" style="color: #4758AB;">st_set_crs</span>(<span class="dv" style="color: #AD0000;">4326</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb42-15">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">time_period =</span> <span class="fu" style="color: #4758AB;">glue</span>(<span class="st" style="color: #20794D;">"{lower} - {upper}"</span>))</span></code></pre></div>
</div>
<p>We can visualise these cumulative centres using <code>geom_label_repel()</code>, just as above. But with carefully selected nudge factors:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">gg_centres_through_time <span class="ot" style="color: #003B4F;">&lt;-</span> gg_oxford_city <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb43-2">  <span class="co" style="color: #5E5E5E;"># geom_sf(data = centres_through_history) +</span></span>
<span id="cb43-3">  <span class="fu" style="color: #4758AB;">geom_label_repel</span>(</span>
<span id="cb43-4">    <span class="at" style="color: #657422;">data =</span> centres_through_history,</span>
<span id="cb43-5">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> time_period, <span class="at" style="color: #657422;">fill =</span> time_period, <span class="at" style="color: #657422;">geometry =</span> geometry),</span>
<span id="cb43-6">    <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"white"</span>,</span>
<span id="cb43-7">    <span class="at" style="color: #657422;">segment.color =</span> <span class="st" style="color: #20794D;">"black"</span>,</span>
<span id="cb43-8">    <span class="at" style="color: #657422;">stat =</span> <span class="st" style="color: #20794D;">"sf_coordinates"</span>,</span>
<span id="cb43-9">    <span class="at" style="color: #657422;">min.segment.length =</span> <span class="fl" style="color: #AD0000;">0.2</span>,</span>
<span id="cb43-10">    <span class="at" style="color: #657422;">nudge_x =</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>), <span class="fu" style="color: #4758AB;">nrow</span>(centres_through_history), <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb43-11">    <span class="at" style="color: #657422;">nudge_y =</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.007</span>, <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.007</span>), <span class="fu" style="color: #4758AB;">nrow</span>(centres_through_history), <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb43-12">    <span class="at" style="color: #657422;">inherit.aes =</span> <span class="cn" style="color: #8f5902;">FALSE</span>,</span>
<span id="cb43-13">    <span class="at" style="color: #657422;">seed =</span> <span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb43-14">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb43-15">    <span class="at" style="color: #657422;">fontface =</span> <span class="st" style="color: #20794D;">'bold'</span></span>
<span id="cb43-16">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb43-17">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Centres of University of Oxford through time"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb43-18">  <span class="fu" style="color: #4758AB;">scale_fill_viridis_d</span>()</span>
<span id="cb43-19">gg_centres_through_time</span></code></pre></div>
</div>
<p><img src="https://visibledata.co.uk/blog/2019-02-18-oxford-centres_files/gg_centres_through_time.png" class="img-fluid" style="width:100.0%"></p>
<p>I’m slightly late to the <code>gganimate</code> bandwagon, but let’s animate this! The <code>transition_states()</code> function will create a GIF that transitions through the <code>time_period</code> column, and I’ve used <code>shadow_wake()</code> so that the centre of mass can be tracked more easily by the reader.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"gganimate"</span>)</span>
<span id="cb44-2">anim <span class="ot" style="color: #003B4F;">&lt;-</span> gg_oxford_city <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb44-3">  <span class="fu" style="color: #4758AB;">geom_sf</span>(<span class="at" style="color: #657422;">data =</span> centres_through_history, <span class="at" style="color: #657422;">inherit.aes =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb44-4">  <span class="fu" style="color: #4758AB;">transition_states</span>(time_period,</span>
<span id="cb44-5">                    <span class="at" style="color: #657422;">transition_length =</span> <span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb44-6">                    <span class="at" style="color: #657422;">state_length =</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb44-7">anim <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb44-8">  <span class="fu" style="color: #4758AB;">enter_fade</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb44-9">  <span class="fu" style="color: #4758AB;">shadow_wake</span>(<span class="at" style="color: #657422;">wake_length =</span> <span class="fl" style="color: #AD0000;">0.05</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb44-10">  <span class="fu" style="color: #4758AB;">exit_shrink</span>()</span>
<span id="cb44-11"><span class="fu" style="color: #4758AB;">anim_save</span>(<span class="fu" style="color: #4758AB;">here</span>(<span class="st" style="color: #20794D;">"oxford-centres.gif"</span>))</span></code></pre></div>
</div>
<p><img src="https://visibledata.co.uk/blog/2019-02-18-oxford-centres_files/oxford-centres.gif" class="img-fluid"></p>
<p>I’d really love to be happy with this GIF, but it’s really not good! The main issue is that <code>ggamp</code> only allows integer zoom levels, so the map is either far too zoomed in or out. It’s also quite slow to experiment with <code>geom_sf</code> at the moment, I’m quite excited for <a href="https://twitter.com/thomasp85/status/1093874268809674752">Thomas Pederson’s promise to speed up <code>geom_sf</code></a>.</p>
</div>
</div>
</div>
</div>


</div></section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hadley2019,
  author = {Charlotte Hadley},
  title = {Where Is the Centre of {University} of {Oxford?}},
  date = {2019-02-18},
  url = {https://visibledata.co.uk/posts/2019-02-18_oxford-centres},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hadley2019" class="csl-entry quarto-appendix-citeas">
Charlotte Hadley. 2019. <span>“Where Is the Centre of University of
Oxford?”</span> February 18, 2019. <a href="https://visibledata.co.uk/posts/2019-02-18_oxford-centres">https://visibledata.co.uk/posts/2019-02-18_oxford-centres</a>.
</div></div></section></div> ]]></description>
  <category>dataviz</category>
  <category>GIS</category>
  <guid>https://visibledata.co.uk/posts/2019-02-18_oxford-centres/index.html</guid>
  <pubDate>Mon, 18 Feb 2019 00:00:00 GMT</pubDate>
  <media:content url="https://visibledata.co.uk//posts/2019-02-18_oxford-centres/gg_century_centres.png" medium="image" type="image/png" height="67" width="144"/>
</item>
<item>
  <title>Using ggmap after July 2018</title>
  <dc:creator>Charlie Joey Hadley</dc:creator>
  <link>https://visibledata.co.uk/posts/2018-12-05-using-ggmap-after-july-2018/index.html</link>
  <description><![CDATA[ 




<p><code>ggmap</code> is an awesome package for creating maps with <code>ggplot2</code>. If you’ve seen a nice looking map built with <code>ggplot2</code> I can almost guarantee you that it uses <code>ggmap</code> to look that good. The <code>ggmap</code> package is used to obtain base maps from the APIs of a number of online mapping tools, the one we care about here is the base maps from Google Maps (because they’re very good).</p>
<p>If you’re reading instructions for using <code>ggmap</code> written before July 2018 <strong>you will fail to replicate the results</strong> unless you make some changes to your workflow. <strong>You will need to give Google your billing information, but can create maps for free</strong>.</p>
<!-- <div class="row"> -->
<!-- <div class="col-sm-6"> -->
<!-- <a class="btn btn-primary btn-block" data-toggle="collapse" href="#whats-an-api" role="button" aria-expanded="false" aria-controls="collapseExample"> -->
<!--     What's an API? -->
<!-- </a> -->
<!-- </div> -->
<!-- <div class="col-sm-6"> -->
<!--   <a class="btn btn-primary btn-block" data-toggle="collapse" href="#what-are-base-maps" role="button" aria-expanded="false" aria-controls="collapseExample"> -->
<!--     What are base maps? -->
<!--   </a> -->
<!-- </div> -->
<!-- </div> -->
<!-- <div class="collapse" id="whats-an-api"> -->
<!--   <div class="card card-body"> -->
<!-- A defined set of interactions with a service to send and receive data. In the case of mapping tools you'll find many API, including one for converting street addresses into longitude and latitudes. -->
<!--   <br/> -->
<!--   </div> -->
<!-- </div> -->
<!-- <div class="collapse" id="what-are-base-maps"> -->
<!--   <div class="card card-body"> -->
<!-- Base maps are the backgrounds of maps. -->
<!--   <br/> -->
<!--   </div> -->
<!-- </div> -->
<section id="whats-changed" class="level2">
<h2 class="anchored" data-anchor-id="whats-changed">What’s changed?</h2>
<p>Before July 2018 it was possible to use the Google Maps API for free without configuration or use account, this is now no longer possible. See the <a href="https://cloud.google.com/maps-platform/pricing/">pricing page</a> for explicit details from Google themselves.</p>
<p>You must do the following to obtain base maps from Google:</p>
<ul>
<li><p>Have a Google Cloud account.</p></li>
<li><p>Enable the Google Maps Platform.</p></li>
<li><p>Provide Google with your billing details.</p></li>
</ul>
<p>You will then be allocated $200 of free usage per month, every month. All API calls will be made against these limits.</p>
<p>If you’re exclusively making static maps with <code>ggmap</code> then <em>you’re extremely unlikely to ever be charged by Google</em>. I’ve summarised the <a href="https://developers.google.com/maps/billing/understanding-cost-of-use">pricing policy</a> as of December 2018 below:</p>
<div class="cell">
<div class="cell-output-display">
<div id="htmlwidget-b9c0d536f88f46555929" style="width:100%;height:100%;" class="widgetframe html-widget"></div>
<script type="application/json" data-for="htmlwidget-b9c0d536f88f46555929">{"x":{"url":"index_files/figure-html//widgets/widget_static-map-pricing.html","options":{"xdomain":"*","allowfullscreen":false,"lazyload":false}},"evals":[],"jsHooks":[]}</script>
</div>
</div>
</section>
<section id="lets-make-our-maps" class="level2">
<h2 class="anchored" data-anchor-id="lets-make-our-maps">Let’s make our maps</h2>
<p>We’ll break this into two stages:</p>
<ol type="1">
<li><p>Preparing our Google Maps Platform account</p></li>
<li><p>Setting up and using <code>ggmap</code></p></li>
</ol>
<section id="preparing-our-google-maps-platform-account" class="level3">
<h3 class="anchored" data-anchor-id="preparing-our-google-maps-platform-account">Preparing our Google Maps Platform account</h3>
<ol type="1">
<li><p>Navigate to <a href="https://cloud.google.com/maps-platform/">https://cloud.google.com/maps-platform/</a> and click “Get Started”</p></li>
<li><p>Select “Maps” in the dialog, leave the other things for another tutorial.</p></li>
</ol>
<p><img src="https://visibledata.co.uk/blog/2018-12-05-using-ggmap-after-july-2018/2018-12-05_google-maps-platform-dialog.png" style="width:450px"></p>
<ol start="3" type="1">
<li>Create a new project for tracking your <code>ggmap</code>-incurred expenses, I suggest using the name <code>ggmap</code></li>
</ol>
<p><img src="https://visibledata.co.uk/blog/2018-12-05-using-ggmap-after-july-2018/2018-12-05_google-maps-platform-project.png" style="width:450px"></p>
<ol start="4" type="1">
<li><p>You’ll be prompted to create a billing account, click “create a billing account”</p></li>
<li><p>Select your country, agree to the terms and conditions, and make a decision about marketing. Please note you’ll likely be told you’re getting $300 per month rather than $200 for 12 months, it’s because Google are trying to keep devs happy during the roll out.</p></li>
</ol>
<p><img src="https://visibledata.co.uk/blog/2018-12-05-using-ggmap-after-july-2018/2018-12-05_google-maps-platform_create-billing-account.png" style="width:450px"></p>
<ol start="6" type="1">
<li><p>Fill in your payment details!</p></li>
<li><p>As of 2018 there’s a modal dialog that you want to click through, I assume this will be designed away in the future so don’t worry if you don’t see it.</p></li>
</ol>
<p><img src="https://visibledata.co.uk/blog/2018-12-05-using-ggmap-after-july-2018/2018-12-05_google-maps-platform_enable-your-api.png" style="width:450px"></p>
<ol start="8" type="1">
<li>Success! Now you have an API key to use in R. You’ll want to copy it down somewhere.</li>
</ol>
<p><img src="https://visibledata.co.uk/blog/2018-12-05-using-ggmap-after-july-2018/2018-12-05_google-maps-platform_api-key.png" style="width:450px"></p>
<p>You need to have your API key with you EVERY time that you use <code>ggmap</code> for the time being. Make sure you keep a note of it from above, or else you can find it with these steps:</p>
<ol type="1">
<li>Navigate to <a href="https://console.cloud.google.com/apis/dashboard">https://console.cloud.google.com/apis/dashboard</a> and select the project (I went with <code>ggmap</code>) you created from the pull down list:</li>
</ol>
<p><img src="https://visibledata.co.uk/blog/2018-12-05-using-ggmap-after-july-2018/2018-12-05_google-maps-platform_select-project.png" style="width:450px"></p>
<ol type="1">
<li>Select credentials from the left-hand nav and you’ll be shown your API key</li>
</ol>
<p><img src="https://visibledata.co.uk/blog/2018-12-05-using-ggmap-after-july-2018/2018-12-05_google-maps-platform_credentials.png" style="width:450px"></p>
</section>
<section id="setting-up-and-using-ggmap" class="level3">
<h3 class="anchored" data-anchor-id="setting-up-and-using-ggmap">Setting up and using <code>ggmap</code></h3>
<p>The instructions for these steps can be found in <a href="https://github.com/dkahle/ggmap/issues/51">Github Issue #51</a>.</p>
<ol type="1">
<li>There’s a dev version of the <code>ggmap</code> package that uses the new APIs, which we can install as follows:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">devtools<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_github</span>(<span class="st" style="color: #20794D;">"dkahle/ggmap"</span>, <span class="at" style="color: #657422;">ref =</span> <span class="st" style="color: #20794D;">"tidyup"</span>)</span></code></pre></div>
</div>
<ol start="2" type="1">
<li><p>You <strong>must</strong> now restart R.</p></li>
<li><p>Load the library and provide your API key</p></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">register_google</span>(<span class="at" style="color: #657422;">key =</span> <span class="st" style="color: #20794D;">"My-FAKE-KEY"</span>)</span></code></pre></div>
</div>
<ol start="4" type="1">
<li>Now we can get our base maps using <code>get_googlemap()</code></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">base_map <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_googlemap</span>(<span class="at" style="color: #657422;">center =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">2.2945</span>, <span class="fl" style="color: #AD0000;">48.858222</span>), <span class="at" style="color: #657422;">maptype =</span> <span class="st" style="color: #20794D;">"roadmap"</span>)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">ggmap</span>(base_map)</span></code></pre></div>
</div>
<p><img src="https://visibledata.co.uk/blog/2018-12-05-using-ggmap-after-july-2018/2018-12-05_ggmap-output.png" style="width:450px"></p>


</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hadley2018,
  author = {Charlotte Hadley and Charlie Joey Hadley},
  title = {Using Ggmap After {July} 2018},
  date = {2018-12-05},
  url = {https://visibledata.co.uk/posts/2018-12-05-using-ggmap-after-july-2018},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hadley2018" class="csl-entry quarto-appendix-citeas">
Charlotte Hadley, and Charlie Joey Hadley. 2018. <span>“Using Ggmap
After July 2018.”</span> December 5, 2018. <a href="https://visibledata.co.uk/posts/2018-12-05-using-ggmap-after-july-2018">https://visibledata.co.uk/posts/2018-12-05-using-ggmap-after-july-2018</a>.
</div></div></section></div> ]]></description>
  <category>dataviz</category>
  <category>R</category>
  <guid>https://visibledata.co.uk/posts/2018-12-05-using-ggmap-after-july-2018/index.html</guid>
  <pubDate>Wed, 05 Dec 2018 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
