---
title: '2023-08-21 Restart in less than an hour'
date: '2023-08*21'
draft: true
execute:
  freeze: true
code-fold: false
engine: knitr
---

It's been over a year since I last published an update to this blog and six months since I've loaded up the project.

Can I get a post written and published succesfully within an hour? It's been 10mins so far.

## Finally using .by in mutate() and summarise()

I initially hated the choice to add `.by` to `mutate()` and `summarise()` but slowly realised I was projecting how I learned on a completely different tidyverse ecosystem.

It's actually really beautiful to use `.by` like this:

```{r}
library(tidyverse)

gss_party_by_marital <- gss_cat %>% 
  summarise(n_in_subcategory = n(), .by = c(partyid, marital)) %>% 
  mutate(n_in_category = sum(n_in_subcategory), .by = partyid) %>% 
  mutate(partyid = fct_reorder(partyid, n_in_category))

gss_party_by_marital %>% 
  ggplot(aes(x = n_in_subcategory,
             y = partyid,
             fill = marital)) +
  geom_col() 
```

## {highcharter} and factors

I've intended to write an article about {highcharter} and how it doesn't rely on factors for years. In lieu of that, here's a quick 101.

{highcharter} doesn't respect the factor ordering:

```{r}
library(highcharter)

gss_party_by_marital %>% 
  hchart(
    type = "bar",
    hcaes(
      y = n_in_subcategory,
      x = partyid,
      group = marital
    )
  ) %>% 
  hc_plotOptions(series = list(stacking = "normal"))
```

The issue is that {highcharter} needs explicitly empty levels, which the `complete()` function provides.

```{r}
gss_completed_data <- gss_cat %>% 
  summarise(n_in_subcategory = n(), .by = c(partyid, marital)) %>% 
  mutate(n_in_category = sum(n_in_subcategory), .by = partyid) %>% 
  mutate(partyid = fct_reorder(partyid, n_in_category)) %>% 
  complete(partyid, 
           marital, 
           fill = list(n_in_category = 0,
                       n_in_subcategory = 0)) %>% 
  arrange(desc(n_in_category))

gss_completed_data

gss_completed_data %>% 
  mutate(partyid = as.character(partyid)) %>% 
  hchart(
    type = "bar",
    hcaes(
      y = n_in_subcategory,
      x = partyid,
      group = marital
    )
  ) %>% 
  hc_plotOptions(series = list(stacking = "normal"))
```











