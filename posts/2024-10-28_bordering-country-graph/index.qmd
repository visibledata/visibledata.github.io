---
title: "Bordering countries graph"
date: '2024-11-04'
execute:
  freeze: true
  message: false
  warning: false
code-fold: false
engine: knitr
filters:
  - line-highlight
---

```{r setup}
#| include: false

quarto_here <- function(rest_of_path){
  here::here(ifelse(
  rstudioapi::isAvailable(), 
  rstudioapi::getActiveDocumentContext()$path,
  knitr::current_input(dir = TRUE)
) |> dirname(),
rest_of_path)
}
```


:::{layout-ncol=2}

:::{.left}

In this post we're going to build up this **graph** which shows all countries with at least one border and the connections that remain after removing countries with only a single border. 

To solve this smoothly I was very pleased to discover the [newly [December 2023] added `guide_custom()` functionality]([`geom_custom()` was added in late 2023](https://github.com/tidyverse/ggplot2/pull/5496)) of `{ggplot2}`. Of course, this just works effortlessly with the `{ggraph}` extension for graph visualisation. 

:::

:::{.right}

![](gg_graph_countries.png)

:::

:::

## Connected Countries with tidygraph and ggraph

I've been thinking about TidyTuesday datasets with country data and how it could be interesting to use country borders as a component of the chart making process. And what's better than working on an actual TidyTuesday visualisation than getting distracted with something tangential to it?

In [my utility package {cjhRutils}](https://github.com/charliejhadley/cjhRutils) I have a `tidygraph` object containing the nodes and edges of the connected countries, the code can be found in [this script](https://github.com/charliejhadley/cjhRutils/blob/master/data-raw/graph_connected_countries.R). After loading the package (alongside `{tidygrapph}`) we can see our dataset:

```{r}
library("tidyverse")
library("tidygraph")
library("cjhRutils")
library("ggtext")

ggraph_bordering_countries
```

The graph contains all countries with at least one connection, let's filter the graph to only include countries with two border or more... and visualise that naively with `{ggraph}`

```{r}
#| code-fold: true
library("ggraph")

set.seed(1)
ggraph_bordering_countries %>%
  activate(nodes) %>%
  mutate(node_degree = tidygraph::centrality_degree()) %>%
  filter(node_degree > 1) %>%
  ggraph(layout = 'nicely') +
  geom_node_point(aes(colour = region_wb)) +
  geom_edge_link(aes(colour = border_region))
```

## Custom ggplot2 legends with guide_custom()

The guide/legend for that chart is a little bit complicated. Let's look at why:

1. Nodes are coloured by the continent the node belongs to.

1. Edges are coloured by if the two nodes belong to the same continent.

1. There is a single node from "North America" but no edges with the `border_region` of "North America"

1. There are edges that need to be coloured "Cross Region" but no nodes with that colour.

To solve this I thought of using my old trick of hijacking an unused aesthetic and manipulating its guide. However! That's not really possible in this case, so I googled for alternatives and was extremeley [`geom_custom()` was added in late 2023](https://github.com/tidyverse/ggplot2/pull/5496). In the chart below I've used `guide_custom()` to add a red line that I can use to label cross regional borders.

```{r}
#| fig-asp: .7
#| out-width: 95%
#| fig-width: 8.142857
set.seed(1)
gg_graph_for_coords <- ggraph_bordering_countries %>%
  activate(nodes) %>%
  mutate(node_degree = tidygraph::centrality_degree()) %>%
  filter(node_degree > 1) %>%
  ggraph(layout = 'nicely') +
  geom_node_point(aes(colour = region_wb)) +
  geom_node_label(aes(label = iso_a2), size = 0) +
  geom_edge_link() +
  guides(custom = guide_custom(
    title = "Cross regional borders",
    grob = grid::linesGrob(
      x = unit(c(0, 5.4), "cm"),
      y = unit(c(0, 0), "cm"),
      gp = grid::gpar(col = '#F44336', lwd = 3)
    )
  ))

gg_graph_for_coords
```

In the final chart I'd like to add a label to the US to explain why it's included but Canada isn't. So let's grab the coordinates of the node so I can use them to help figure out where to place the label

```{r}
ggplot_build(gg_graph_for_coords)$data[[3]] %>%
  filter(label == "US") %>%
  select(x, y) %>%
  as_tibble()
```

Nice. Now we can think about beautification. I've chosen to use colours from the <coolors.co> service and have found a subjective balance of colours that I think looks good based on how many nodes are in each group. To ensure a little bit of sense to the colours, I'll order them as a factor so that the group with the most nodes appears at the top of the legend.

```{r}
#| output: false
#| code-fold: true
# https://coolors.co/448aff-1565c0-009688-8bc34a-ffc107-ff9800-f44336-ad1457
vec_colours <- c(
  "Cross Region" = "#F44336",
  "East Asia & Pacific" = "#1565C0",
  "Europe & Central Asia" = "#009688",
  "Latin America & Caribbean" = "#8BC34A",
  "Middle East & North Africa" = "#FFC107",
  "North America" = "#FF9800",
  "South Asia" = "#448AFF",
  "Sub-Saharan Africa" = "#AD1457"
)

vec_order_borders <- ggraph_bordering_countries %>%
  activate(edges) %>%
  as_tibble() %>%
  count(border_region, sort = TRUE) %>%
  pull(border_region)

vec_colours <- vec_colours[vec_order_borders]

ggraph_one_edge_plus <- ggraph_bordering_countries %>%
  activate(nodes) %>%
  mutate(node_degree = tidygraph::centrality_degree()) %>%
  filter(node_degree > 1)  %>%
  mutate(region_wb = fct_relevel(region_wb, vec_order_borders)) %>%
  activate(edges) %>%
  mutate(
    border_region = fct_expand(border_region, "North America"),
    border_region = fct_relevel(border_region)
  )

set.seed(1)
gg_graph_before_label <- ggraph_one_edge_plus %>%
  ggraph(layout = 'nicely') +
  aes(colour = region_wb) +
  geom_edge_link(aes(colour = border_region),
                 show.legend = FALSE,
                 edge_width = 0.5) +
  geom_node_point(
    aes(fill = region_wb),
    # show.legend = TRUE,
    colour = "black",
    size = 5,
    pch = 21
  ) +
  geom_node_text(
    aes(
      label = iso_a2,
      colour = ifelse(
        region_wb %in% c("Middle East & North Africa", "North America"),
        "black",
        "white"
      )
    ),
    size = 2.3,
    family = "Source Code Pro",
    fontface = "bold"
  )  +
  scale_colour_identity() +
  scale_edge_colour_manual(values = vec_colours, drop = FALSE) +
  scale_fill_manual(values = vec_colours, drop = FALSE) +
  guides(
    custom = guide_custom(
      title = "Cross regional borders",
      grob = grid::linesGrob(
        x = unit(c(0, 6.9), "cm"),
        y = unit(c(0, 0), "cm"),
        gp = grid::gpar(col = '#F44336', lwd = 3.5)
      )
    ),
    fill = guide_legend(title = "")
  ) +
  labs(
    title = "Who's connected to who?",
    subtitle = "Countries with at least one land border",
    x = "",
    y = "",
    caption = "@charliejhadley | Source: geodatasource.com/addon/country-borders"
  ) +
  theme_minimal(base_size = 12, base_family = "Roboto") +
  theme(
    legend.title = element_text(size = 12 * 1.618),
    panel.grid = element_blank(),
    plot.caption = element_text(
      size = 12,
      family = "Roboto",
      lineheight = 0.5,
      margin = margin(t = -5)
    ),
    plot.title = element_text(
      family = "Roboto",
      size = 12 * 1.618 ^ 3,
      margin = margin(t = 20)
    ),
    plot.subtitle = element_text(size = 12 * 1.618 ^ 2, margin = margin(b = -10)),
    panel.grid.major.y = element_blank(),
    axis.line = element_blank(),
    axis.ticks = element_blank(),
    axis.text = element_blank(),
    legend.text = element_text(size = 12 * 1.618),
    # legend.spacing.y = unit(2.0, "cm"),
    legend.key.size = unit(1, "cm"),
    legend.key = element_rect(color = NA, fill = NA),
    plot.caption.position = "plot"
  )

gg_graph_before_label
```

```{r}
#| echo: false
gg_graph_before_label %>%
  ggsave(
    quarto_here("gg_graph_before_label.png"),
    .,
    width = 4.25 * 3,
    height = 3.4 * 3,
    bg = "#D8E4EA"
  )
```
![](gg_graph_before_label.png)

Let's add in my labels, which are manually placed but use the node position extracted earlier to help place them.

```{r}
gg_graph_countries <- gg_graph_before_label +
  geom_curve(
    data = tibble(
      x = 5.08 - 8.5,
      y = -4.96 ,
      xend = 5.08 - 1.3,
      yend = -4.96 - 0.2
    ),
    aes(x, y, yend = yend, xend = xend),
    
    inherit.aes = FALSE,
    arrow = arrow(length = unit(0.01, "npc")),
    curvature = 0.2,
    angle = 90
  ) +
  geom_label(
    data = tibble(
      x = 5.08 - 8.5,
      y = -4.96 - 0.5,
      label = str_wrap(
        "Canada isn't here. It only has a single land border with the US - which is included as it has two borders",
        30
      )
    ),
    aes(x, y, label = label),
    fill = colorspace::darken("#D8E4EA"),
    label.padding = unit(0.4, "lines"),
    hjust = 0,
    colour = "black",
    inherit.aes = FALSE,
    size = 4
  )

gg_graph_countries %>%
  ggsave(
    quarto_here("gg_graph_countries.png"),
    .,
    width = 4.25 * 3,
    height = 3.4 * 3,
    bg = "#D8E4EA"
  )
```

![](gg_graph_countries.png)